{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMoqO6k2g+B7Fja61LON12K",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Gathrial/schneider/blob/main/task7ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "U6BdcFprtvY7"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.datasets import load_breast_cancer"
      ],
      "metadata": {
        "id": "Ta4voWduuMee"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cancer = load_breast_cancer()"
      ],
      "metadata": {
        "id": "B1i78pnpuXDX"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cancer.keys()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Kyx5jONucM3",
        "outputId": "811fec82-9d50-4d52-c824-8f15e57bf9cb"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_keys(['data', 'target', 'frame', 'target_names', 'DESCR', 'feature_names', 'filename', 'data_module'])"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(cancer['DESCR'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7DcQ_WD6uh5f",
        "outputId": "95ebffa5-8343-499d-ce45-248fe02a5967"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ".. _breast_cancer_dataset:\n",
            "\n",
            "Breast cancer wisconsin (diagnostic) dataset\n",
            "--------------------------------------------\n",
            "\n",
            "**Data Set Characteristics:**\n",
            "\n",
            ":Number of Instances: 569\n",
            "\n",
            ":Number of Attributes: 30 numeric, predictive attributes and the class\n",
            "\n",
            ":Attribute Information:\n",
            "    - radius (mean of distances from center to points on the perimeter)\n",
            "    - texture (standard deviation of gray-scale values)\n",
            "    - perimeter\n",
            "    - area\n",
            "    - smoothness (local variation in radius lengths)\n",
            "    - compactness (perimeter^2 / area - 1.0)\n",
            "    - concavity (severity of concave portions of the contour)\n",
            "    - concave points (number of concave portions of the contour)\n",
            "    - symmetry\n",
            "    - fractal dimension (\"coastline approximation\" - 1)\n",
            "\n",
            "    The mean, standard error, and \"worst\" or largest (mean of the three\n",
            "    worst/largest values) of these features were computed for each image,\n",
            "    resulting in 30 features.  For instance, field 0 is Mean Radius, field\n",
            "    10 is Radius SE, field 20 is Worst Radius.\n",
            "\n",
            "    - class:\n",
            "            - WDBC-Malignant\n",
            "            - WDBC-Benign\n",
            "\n",
            ":Summary Statistics:\n",
            "\n",
            "===================================== ====== ======\n",
            "                                        Min    Max\n",
            "===================================== ====== ======\n",
            "radius (mean):                        6.981  28.11\n",
            "texture (mean):                       9.71   39.28\n",
            "perimeter (mean):                     43.79  188.5\n",
            "area (mean):                          143.5  2501.0\n",
            "smoothness (mean):                    0.053  0.163\n",
            "compactness (mean):                   0.019  0.345\n",
            "concavity (mean):                     0.0    0.427\n",
            "concave points (mean):                0.0    0.201\n",
            "symmetry (mean):                      0.106  0.304\n",
            "fractal dimension (mean):             0.05   0.097\n",
            "radius (standard error):              0.112  2.873\n",
            "texture (standard error):             0.36   4.885\n",
            "perimeter (standard error):           0.757  21.98\n",
            "area (standard error):                6.802  542.2\n",
            "smoothness (standard error):          0.002  0.031\n",
            "compactness (standard error):         0.002  0.135\n",
            "concavity (standard error):           0.0    0.396\n",
            "concave points (standard error):      0.0    0.053\n",
            "symmetry (standard error):            0.008  0.079\n",
            "fractal dimension (standard error):   0.001  0.03\n",
            "radius (worst):                       7.93   36.04\n",
            "texture (worst):                      12.02  49.54\n",
            "perimeter (worst):                    50.41  251.2\n",
            "area (worst):                         185.2  4254.0\n",
            "smoothness (worst):                   0.071  0.223\n",
            "compactness (worst):                  0.027  1.058\n",
            "concavity (worst):                    0.0    1.252\n",
            "concave points (worst):               0.0    0.291\n",
            "symmetry (worst):                     0.156  0.664\n",
            "fractal dimension (worst):            0.055  0.208\n",
            "===================================== ====== ======\n",
            "\n",
            ":Missing Attribute Values: None\n",
            "\n",
            ":Class Distribution: 212 - Malignant, 357 - Benign\n",
            "\n",
            ":Creator:  Dr. William H. Wolberg, W. Nick Street, Olvi L. Mangasarian\n",
            "\n",
            ":Donor: Nick Street\n",
            "\n",
            ":Date: November, 1995\n",
            "\n",
            "This is a copy of UCI ML Breast Cancer Wisconsin (Diagnostic) datasets.\n",
            "https://goo.gl/U2Uwz2\n",
            "\n",
            "Features are computed from a digitized image of a fine needle\n",
            "aspirate (FNA) of a breast mass.  They describe\n",
            "characteristics of the cell nuclei present in the image.\n",
            "\n",
            "Separating plane described above was obtained using\n",
            "Multisurface Method-Tree (MSM-T) [K. P. Bennett, \"Decision Tree\n",
            "Construction Via Linear Programming.\" Proceedings of the 4th\n",
            "Midwest Artificial Intelligence and Cognitive Science Society,\n",
            "pp. 97-101, 1992], a classification method which uses linear\n",
            "programming to construct a decision tree.  Relevant features\n",
            "were selected using an exhaustive search in the space of 1-4\n",
            "features and 1-3 separating planes.\n",
            "\n",
            "The actual linear program used to obtain the separating plane\n",
            "in the 3-dimensional space is that described in:\n",
            "[K. P. Bennett and O. L. Mangasarian: \"Robust Linear\n",
            "Programming Discrimination of Two Linearly Inseparable Sets\",\n",
            "Optimization Methods and Software 1, 1992, 23-34].\n",
            "\n",
            "This database is also available through the UW CS ftp server:\n",
            "\n",
            "ftp ftp.cs.wisc.edu\n",
            "cd math-prog/cpo-dataset/machine-learn/WDBC/\n",
            "\n",
            ".. dropdown:: References\n",
            "\n",
            "  - W.N. Street, W.H. Wolberg and O.L. Mangasarian. Nuclear feature extraction\n",
            "    for breast tumor diagnosis. IS&T/SPIE 1993 International Symposium on\n",
            "    Electronic Imaging: Science and Technology, volume 1905, pages 861-870,\n",
            "    San Jose, CA, 1993.\n",
            "  - O.L. Mangasarian, W.N. Street and W.H. Wolberg. Breast cancer diagnosis and\n",
            "    prognosis via linear programming. Operations Research, 43(4), pages 570-577,\n",
            "    July-August 1995.\n",
            "  - W.H. Wolberg, W.N. Street, and O.L. Mangasarian. Machine learning techniques\n",
            "    to diagnose breast cancer from fine-needle aspirates. Cancer Letters 77 (1994)\n",
            "    163-171.\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cancer['feature_names']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RNq2filTupAo",
        "outputId": "567afcf0-0e8f-4108-c395-c28319fe6f3e"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['mean radius', 'mean texture', 'mean perimeter', 'mean area',\n",
              "       'mean smoothness', 'mean compactness', 'mean concavity',\n",
              "       'mean concave points', 'mean symmetry', 'mean fractal dimension',\n",
              "       'radius error', 'texture error', 'perimeter error', 'area error',\n",
              "       'smoothness error', 'compactness error', 'concavity error',\n",
              "       'concave points error', 'symmetry error',\n",
              "       'fractal dimension error', 'worst radius', 'worst texture',\n",
              "       'worst perimeter', 'worst area', 'worst smoothness',\n",
              "       'worst compactness', 'worst concavity', 'worst concave points',\n",
              "       'worst symmetry', 'worst fractal dimension'], dtype='<U23')"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.DataFrame(cancer['data'],columns=cancer['feature_names'])\n",
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9frZuTsyuxVP",
        "outputId": "76e35c98-44f4-4609-e208-b0853edccd22"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 569 entries, 0 to 568\n",
            "Data columns (total 30 columns):\n",
            " #   Column                   Non-Null Count  Dtype  \n",
            "---  ------                   --------------  -----  \n",
            " 0   mean radius              569 non-null    float64\n",
            " 1   mean texture             569 non-null    float64\n",
            " 2   mean perimeter           569 non-null    float64\n",
            " 3   mean area                569 non-null    float64\n",
            " 4   mean smoothness          569 non-null    float64\n",
            " 5   mean compactness         569 non-null    float64\n",
            " 6   mean concavity           569 non-null    float64\n",
            " 7   mean concave points      569 non-null    float64\n",
            " 8   mean symmetry            569 non-null    float64\n",
            " 9   mean fractal dimension   569 non-null    float64\n",
            " 10  radius error             569 non-null    float64\n",
            " 11  texture error            569 non-null    float64\n",
            " 12  perimeter error          569 non-null    float64\n",
            " 13  area error               569 non-null    float64\n",
            " 14  smoothness error         569 non-null    float64\n",
            " 15  compactness error        569 non-null    float64\n",
            " 16  concavity error          569 non-null    float64\n",
            " 17  concave points error     569 non-null    float64\n",
            " 18  symmetry error           569 non-null    float64\n",
            " 19  fractal dimension error  569 non-null    float64\n",
            " 20  worst radius             569 non-null    float64\n",
            " 21  worst texture            569 non-null    float64\n",
            " 22  worst perimeter          569 non-null    float64\n",
            " 23  worst area               569 non-null    float64\n",
            " 24  worst smoothness         569 non-null    float64\n",
            " 25  worst compactness        569 non-null    float64\n",
            " 26  worst concavity          569 non-null    float64\n",
            " 27  worst concave points     569 non-null    float64\n",
            " 28  worst symmetry           569 non-null    float64\n",
            " 29  worst fractal dimension  569 non-null    float64\n",
            "dtypes: float64(30)\n",
            "memory usage: 133.5 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 384
        },
        "id": "av7K56Vyu_cs",
        "outputId": "79bb4924-658a-4b7e-e5d1-7f126b1c5d21"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       mean radius  mean texture  mean perimeter    mean area  \\\n",
              "count   569.000000    569.000000      569.000000   569.000000   \n",
              "mean     14.127292     19.289649       91.969033   654.889104   \n",
              "std       3.524049      4.301036       24.298981   351.914129   \n",
              "min       6.981000      9.710000       43.790000   143.500000   \n",
              "25%      11.700000     16.170000       75.170000   420.300000   \n",
              "50%      13.370000     18.840000       86.240000   551.100000   \n",
              "75%      15.780000     21.800000      104.100000   782.700000   \n",
              "max      28.110000     39.280000      188.500000  2501.000000   \n",
              "\n",
              "       mean smoothness  mean compactness  mean concavity  mean concave points  \\\n",
              "count       569.000000        569.000000      569.000000           569.000000   \n",
              "mean          0.096360          0.104341        0.088799             0.048919   \n",
              "std           0.014064          0.052813        0.079720             0.038803   \n",
              "min           0.052630          0.019380        0.000000             0.000000   \n",
              "25%           0.086370          0.064920        0.029560             0.020310   \n",
              "50%           0.095870          0.092630        0.061540             0.033500   \n",
              "75%           0.105300          0.130400        0.130700             0.074000   \n",
              "max           0.163400          0.345400        0.426800             0.201200   \n",
              "\n",
              "       mean symmetry  mean fractal dimension  ...  worst radius  \\\n",
              "count     569.000000              569.000000  ...    569.000000   \n",
              "mean        0.181162                0.062798  ...     16.269190   \n",
              "std         0.027414                0.007060  ...      4.833242   \n",
              "min         0.106000                0.049960  ...      7.930000   \n",
              "25%         0.161900                0.057700  ...     13.010000   \n",
              "50%         0.179200                0.061540  ...     14.970000   \n",
              "75%         0.195700                0.066120  ...     18.790000   \n",
              "max         0.304000                0.097440  ...     36.040000   \n",
              "\n",
              "       worst texture  worst perimeter   worst area  worst smoothness  \\\n",
              "count     569.000000       569.000000   569.000000        569.000000   \n",
              "mean       25.677223       107.261213   880.583128          0.132369   \n",
              "std         6.146258        33.602542   569.356993          0.022832   \n",
              "min        12.020000        50.410000   185.200000          0.071170   \n",
              "25%        21.080000        84.110000   515.300000          0.116600   \n",
              "50%        25.410000        97.660000   686.500000          0.131300   \n",
              "75%        29.720000       125.400000  1084.000000          0.146000   \n",
              "max        49.540000       251.200000  4254.000000          0.222600   \n",
              "\n",
              "       worst compactness  worst concavity  worst concave points  \\\n",
              "count         569.000000       569.000000            569.000000   \n",
              "mean            0.254265         0.272188              0.114606   \n",
              "std             0.157336         0.208624              0.065732   \n",
              "min             0.027290         0.000000              0.000000   \n",
              "25%             0.147200         0.114500              0.064930   \n",
              "50%             0.211900         0.226700              0.099930   \n",
              "75%             0.339100         0.382900              0.161400   \n",
              "max             1.058000         1.252000              0.291000   \n",
              "\n",
              "       worst symmetry  worst fractal dimension  \n",
              "count      569.000000               569.000000  \n",
              "mean         0.290076                 0.083946  \n",
              "std          0.061867                 0.018061  \n",
              "min          0.156500                 0.055040  \n",
              "25%          0.250400                 0.071460  \n",
              "50%          0.282200                 0.080040  \n",
              "75%          0.317900                 0.092080  \n",
              "max          0.663800                 0.207500  \n",
              "\n",
              "[8 rows x 30 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a84d7efe-9695-4681-b365-36968703491b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean radius</th>\n",
              "      <th>mean texture</th>\n",
              "      <th>mean perimeter</th>\n",
              "      <th>mean area</th>\n",
              "      <th>mean smoothness</th>\n",
              "      <th>mean compactness</th>\n",
              "      <th>mean concavity</th>\n",
              "      <th>mean concave points</th>\n",
              "      <th>mean symmetry</th>\n",
              "      <th>mean fractal dimension</th>\n",
              "      <th>...</th>\n",
              "      <th>worst radius</th>\n",
              "      <th>worst texture</th>\n",
              "      <th>worst perimeter</th>\n",
              "      <th>worst area</th>\n",
              "      <th>worst smoothness</th>\n",
              "      <th>worst compactness</th>\n",
              "      <th>worst concavity</th>\n",
              "      <th>worst concave points</th>\n",
              "      <th>worst symmetry</th>\n",
              "      <th>worst fractal dimension</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>14.127292</td>\n",
              "      <td>19.289649</td>\n",
              "      <td>91.969033</td>\n",
              "      <td>654.889104</td>\n",
              "      <td>0.096360</td>\n",
              "      <td>0.104341</td>\n",
              "      <td>0.088799</td>\n",
              "      <td>0.048919</td>\n",
              "      <td>0.181162</td>\n",
              "      <td>0.062798</td>\n",
              "      <td>...</td>\n",
              "      <td>16.269190</td>\n",
              "      <td>25.677223</td>\n",
              "      <td>107.261213</td>\n",
              "      <td>880.583128</td>\n",
              "      <td>0.132369</td>\n",
              "      <td>0.254265</td>\n",
              "      <td>0.272188</td>\n",
              "      <td>0.114606</td>\n",
              "      <td>0.290076</td>\n",
              "      <td>0.083946</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.524049</td>\n",
              "      <td>4.301036</td>\n",
              "      <td>24.298981</td>\n",
              "      <td>351.914129</td>\n",
              "      <td>0.014064</td>\n",
              "      <td>0.052813</td>\n",
              "      <td>0.079720</td>\n",
              "      <td>0.038803</td>\n",
              "      <td>0.027414</td>\n",
              "      <td>0.007060</td>\n",
              "      <td>...</td>\n",
              "      <td>4.833242</td>\n",
              "      <td>6.146258</td>\n",
              "      <td>33.602542</td>\n",
              "      <td>569.356993</td>\n",
              "      <td>0.022832</td>\n",
              "      <td>0.157336</td>\n",
              "      <td>0.208624</td>\n",
              "      <td>0.065732</td>\n",
              "      <td>0.061867</td>\n",
              "      <td>0.018061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>6.981000</td>\n",
              "      <td>9.710000</td>\n",
              "      <td>43.790000</td>\n",
              "      <td>143.500000</td>\n",
              "      <td>0.052630</td>\n",
              "      <td>0.019380</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.106000</td>\n",
              "      <td>0.049960</td>\n",
              "      <td>...</td>\n",
              "      <td>7.930000</td>\n",
              "      <td>12.020000</td>\n",
              "      <td>50.410000</td>\n",
              "      <td>185.200000</td>\n",
              "      <td>0.071170</td>\n",
              "      <td>0.027290</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.156500</td>\n",
              "      <td>0.055040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>11.700000</td>\n",
              "      <td>16.170000</td>\n",
              "      <td>75.170000</td>\n",
              "      <td>420.300000</td>\n",
              "      <td>0.086370</td>\n",
              "      <td>0.064920</td>\n",
              "      <td>0.029560</td>\n",
              "      <td>0.020310</td>\n",
              "      <td>0.161900</td>\n",
              "      <td>0.057700</td>\n",
              "      <td>...</td>\n",
              "      <td>13.010000</td>\n",
              "      <td>21.080000</td>\n",
              "      <td>84.110000</td>\n",
              "      <td>515.300000</td>\n",
              "      <td>0.116600</td>\n",
              "      <td>0.147200</td>\n",
              "      <td>0.114500</td>\n",
              "      <td>0.064930</td>\n",
              "      <td>0.250400</td>\n",
              "      <td>0.071460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>13.370000</td>\n",
              "      <td>18.840000</td>\n",
              "      <td>86.240000</td>\n",
              "      <td>551.100000</td>\n",
              "      <td>0.095870</td>\n",
              "      <td>0.092630</td>\n",
              "      <td>0.061540</td>\n",
              "      <td>0.033500</td>\n",
              "      <td>0.179200</td>\n",
              "      <td>0.061540</td>\n",
              "      <td>...</td>\n",
              "      <td>14.970000</td>\n",
              "      <td>25.410000</td>\n",
              "      <td>97.660000</td>\n",
              "      <td>686.500000</td>\n",
              "      <td>0.131300</td>\n",
              "      <td>0.211900</td>\n",
              "      <td>0.226700</td>\n",
              "      <td>0.099930</td>\n",
              "      <td>0.282200</td>\n",
              "      <td>0.080040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>15.780000</td>\n",
              "      <td>21.800000</td>\n",
              "      <td>104.100000</td>\n",
              "      <td>782.700000</td>\n",
              "      <td>0.105300</td>\n",
              "      <td>0.130400</td>\n",
              "      <td>0.130700</td>\n",
              "      <td>0.074000</td>\n",
              "      <td>0.195700</td>\n",
              "      <td>0.066120</td>\n",
              "      <td>...</td>\n",
              "      <td>18.790000</td>\n",
              "      <td>29.720000</td>\n",
              "      <td>125.400000</td>\n",
              "      <td>1084.000000</td>\n",
              "      <td>0.146000</td>\n",
              "      <td>0.339100</td>\n",
              "      <td>0.382900</td>\n",
              "      <td>0.161400</td>\n",
              "      <td>0.317900</td>\n",
              "      <td>0.092080</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>28.110000</td>\n",
              "      <td>39.280000</td>\n",
              "      <td>188.500000</td>\n",
              "      <td>2501.000000</td>\n",
              "      <td>0.163400</td>\n",
              "      <td>0.345400</td>\n",
              "      <td>0.426800</td>\n",
              "      <td>0.201200</td>\n",
              "      <td>0.304000</td>\n",
              "      <td>0.097440</td>\n",
              "      <td>...</td>\n",
              "      <td>36.040000</td>\n",
              "      <td>49.540000</td>\n",
              "      <td>251.200000</td>\n",
              "      <td>4254.000000</td>\n",
              "      <td>0.222600</td>\n",
              "      <td>1.058000</td>\n",
              "      <td>1.252000</td>\n",
              "      <td>0.291000</td>\n",
              "      <td>0.663800</td>\n",
              "      <td>0.207500</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 30 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a84d7efe-9695-4681-b365-36968703491b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a84d7efe-9695-4681-b365-36968703491b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a84d7efe-9695-4681-b365-36968703491b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9e8bdb95-9f89-49bd-a74f-64b9d6e9867c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9e8bdb95-9f89-49bd-a74f-64b9d6e9867c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9e8bdb95-9f89-49bd-a74f-64b9d6e9867c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.sum(pd.isnull(df).sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NNWjZy-svKo7",
        "outputId": "47bdfe2e-0331-4bab-9948-5fb384191af8"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.int64(0)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cancer['target']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_lldJpQjvRvn",
        "outputId": "2c429b04-4f88-49f2-ae46-7fab083daed4"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n",
              "       1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0,\n",
              "       1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,\n",
              "       0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,\n",
              "       1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0,\n",
              "       0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,\n",
              "       1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1,\n",
              "       1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n",
              "       0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,\n",
              "       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,\n",
              "       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1,\n",
              "       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1,\n",
              "       1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n",
              "       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n",
              "       1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1,\n",
              "       1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Cancer'] = pd.DataFrame(cancer['target'])\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "id": "uM6551qivZm_",
        "outputId": "f59bde24-1196-48a9-e3f2-6eed631ada48"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
              "0        17.99         10.38          122.80     1001.0          0.11840   \n",
              "1        20.57         17.77          132.90     1326.0          0.08474   \n",
              "2        19.69         21.25          130.00     1203.0          0.10960   \n",
              "3        11.42         20.38           77.58      386.1          0.14250   \n",
              "4        20.29         14.34          135.10     1297.0          0.10030   \n",
              "\n",
              "   mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
              "0           0.27760          0.3001              0.14710         0.2419   \n",
              "1           0.07864          0.0869              0.07017         0.1812   \n",
              "2           0.15990          0.1974              0.12790         0.2069   \n",
              "3           0.28390          0.2414              0.10520         0.2597   \n",
              "4           0.13280          0.1980              0.10430         0.1809   \n",
              "\n",
              "   mean fractal dimension  ...  worst texture  worst perimeter  worst area  \\\n",
              "0                 0.07871  ...          17.33           184.60      2019.0   \n",
              "1                 0.05667  ...          23.41           158.80      1956.0   \n",
              "2                 0.05999  ...          25.53           152.50      1709.0   \n",
              "3                 0.09744  ...          26.50            98.87       567.7   \n",
              "4                 0.05883  ...          16.67           152.20      1575.0   \n",
              "\n",
              "   worst smoothness  worst compactness  worst concavity  worst concave points  \\\n",
              "0            0.1622             0.6656           0.7119                0.2654   \n",
              "1            0.1238             0.1866           0.2416                0.1860   \n",
              "2            0.1444             0.4245           0.4504                0.2430   \n",
              "3            0.2098             0.8663           0.6869                0.2575   \n",
              "4            0.1374             0.2050           0.4000                0.1625   \n",
              "\n",
              "   worst symmetry  worst fractal dimension  Cancer  \n",
              "0          0.4601                  0.11890       0  \n",
              "1          0.2750                  0.08902       0  \n",
              "2          0.3613                  0.08758       0  \n",
              "3          0.6638                  0.17300       0  \n",
              "4          0.2364                  0.07678       0  \n",
              "\n",
              "[5 rows x 31 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-12708ca0-a85b-4ef5-9703-45b5e1ba1547\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean radius</th>\n",
              "      <th>mean texture</th>\n",
              "      <th>mean perimeter</th>\n",
              "      <th>mean area</th>\n",
              "      <th>mean smoothness</th>\n",
              "      <th>mean compactness</th>\n",
              "      <th>mean concavity</th>\n",
              "      <th>mean concave points</th>\n",
              "      <th>mean symmetry</th>\n",
              "      <th>mean fractal dimension</th>\n",
              "      <th>...</th>\n",
              "      <th>worst texture</th>\n",
              "      <th>worst perimeter</th>\n",
              "      <th>worst area</th>\n",
              "      <th>worst smoothness</th>\n",
              "      <th>worst compactness</th>\n",
              "      <th>worst concavity</th>\n",
              "      <th>worst concave points</th>\n",
              "      <th>worst symmetry</th>\n",
              "      <th>worst fractal dimension</th>\n",
              "      <th>Cancer</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17.99</td>\n",
              "      <td>10.38</td>\n",
              "      <td>122.80</td>\n",
              "      <td>1001.0</td>\n",
              "      <td>0.11840</td>\n",
              "      <td>0.27760</td>\n",
              "      <td>0.3001</td>\n",
              "      <td>0.14710</td>\n",
              "      <td>0.2419</td>\n",
              "      <td>0.07871</td>\n",
              "      <td>...</td>\n",
              "      <td>17.33</td>\n",
              "      <td>184.60</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.1622</td>\n",
              "      <td>0.6656</td>\n",
              "      <td>0.7119</td>\n",
              "      <td>0.2654</td>\n",
              "      <td>0.4601</td>\n",
              "      <td>0.11890</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>20.57</td>\n",
              "      <td>17.77</td>\n",
              "      <td>132.90</td>\n",
              "      <td>1326.0</td>\n",
              "      <td>0.08474</td>\n",
              "      <td>0.07864</td>\n",
              "      <td>0.0869</td>\n",
              "      <td>0.07017</td>\n",
              "      <td>0.1812</td>\n",
              "      <td>0.05667</td>\n",
              "      <td>...</td>\n",
              "      <td>23.41</td>\n",
              "      <td>158.80</td>\n",
              "      <td>1956.0</td>\n",
              "      <td>0.1238</td>\n",
              "      <td>0.1866</td>\n",
              "      <td>0.2416</td>\n",
              "      <td>0.1860</td>\n",
              "      <td>0.2750</td>\n",
              "      <td>0.08902</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>19.69</td>\n",
              "      <td>21.25</td>\n",
              "      <td>130.00</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>0.10960</td>\n",
              "      <td>0.15990</td>\n",
              "      <td>0.1974</td>\n",
              "      <td>0.12790</td>\n",
              "      <td>0.2069</td>\n",
              "      <td>0.05999</td>\n",
              "      <td>...</td>\n",
              "      <td>25.53</td>\n",
              "      <td>152.50</td>\n",
              "      <td>1709.0</td>\n",
              "      <td>0.1444</td>\n",
              "      <td>0.4245</td>\n",
              "      <td>0.4504</td>\n",
              "      <td>0.2430</td>\n",
              "      <td>0.3613</td>\n",
              "      <td>0.08758</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.42</td>\n",
              "      <td>20.38</td>\n",
              "      <td>77.58</td>\n",
              "      <td>386.1</td>\n",
              "      <td>0.14250</td>\n",
              "      <td>0.28390</td>\n",
              "      <td>0.2414</td>\n",
              "      <td>0.10520</td>\n",
              "      <td>0.2597</td>\n",
              "      <td>0.09744</td>\n",
              "      <td>...</td>\n",
              "      <td>26.50</td>\n",
              "      <td>98.87</td>\n",
              "      <td>567.7</td>\n",
              "      <td>0.2098</td>\n",
              "      <td>0.8663</td>\n",
              "      <td>0.6869</td>\n",
              "      <td>0.2575</td>\n",
              "      <td>0.6638</td>\n",
              "      <td>0.17300</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20.29</td>\n",
              "      <td>14.34</td>\n",
              "      <td>135.10</td>\n",
              "      <td>1297.0</td>\n",
              "      <td>0.10030</td>\n",
              "      <td>0.13280</td>\n",
              "      <td>0.1980</td>\n",
              "      <td>0.10430</td>\n",
              "      <td>0.1809</td>\n",
              "      <td>0.05883</td>\n",
              "      <td>...</td>\n",
              "      <td>16.67</td>\n",
              "      <td>152.20</td>\n",
              "      <td>1575.0</td>\n",
              "      <td>0.1374</td>\n",
              "      <td>0.2050</td>\n",
              "      <td>0.4000</td>\n",
              "      <td>0.1625</td>\n",
              "      <td>0.2364</td>\n",
              "      <td>0.07678</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 31 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-12708ca0-a85b-4ef5-9703-45b5e1ba1547')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-12708ca0-a85b-4ef5-9703-45b5e1ba1547 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-12708ca0-a85b-4ef5-9703-45b5e1ba1547');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-16a1ac85-deac-423d-925e-a158e1a2a8fb\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-16a1ac85-deac-423d-925e-a158e1a2a8fb')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-16a1ac85-deac-423d-925e-a158e1a2a8fb button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.set_style('whitegrid')\n",
        "sns.countplot(x='Cancer',data=df,palette='RdBu_r')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "hL-veCT-vhtA",
        "outputId": "d6f81639-7f6c-46ad-fd67-83543262201b"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-12-38ac4b56307c>:2: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x='Cancer',data=df,palette='RdBu_r')\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Cancer', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjsAAAGwCAYAAABPSaTdAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAKBtJREFUeJzt3X9Q1XW+x/EXHEAwfigcLOkHmeTxB8iPtVEIY3L6bc1ecpRtmNSuLXbVtCylzBS0K5jWWqnZdV2vP9d+WN7V3c273rs1OlJaKyu6RhEVOu4uB9QgQIHDuX80nrtnTePHwe/h4/Mx4wzn+/3yPe9vM9948j3fcwhwu91uAQAAGCrQ6gEAAAC6E7EDAACMRuwAAACjETsAAMBoxA4AADAasQMAAIxG7AAAAKMFWT2AP2hra1Nra6sCAwMVEBBg9TgAAKAd3G632traFBQUpMDAi1+/IXYktba2qqyszOoxAABAJyQlJSkkJOSi64kdyVODSUlJstlsFk8DAADaw+Vyqays7JJXdSRiR5I8L13ZbDZiBwCAHubHbkHhBmUAAGA0YgcAABiN2AEAAEYjdgAAgNGIHQAAYDRiBwAAGI3YAQAARiN2AACA0YgdAABgNGIHAAAYjdgBAABGI3YAAIDRiB0AAGA0YgcAABiN2AEAAEYjdgCgi9xut9UjAH7JX86NIKsHAICeLiAgQPVH9qu14VurRwH8RtBVUYpIzLB6DEnEDgD4RGvDt3LVn7Z6DAA/wNKXsbZu3aoHHnhAaWlpSktLU05Ojj788EPP+ocfflgOh8Pr34IFC7z2cfLkSeXl5Sk5OVnp6elaunSpWltbL/ehAAAAP2XplZ1rrrlGTz/9tOLj4+V2u7Vjxw5Nnz5d7733nm6++WZJ0oQJEzRz5kzP94SFhXm+drlcmjp1qux2u7Zt26bq6mrl5+crODhYs2fPvuzHAwAA/I+lV3bGjBmjrKws3XjjjRowYICefPJJ9e7dW6WlpZ5tQkNDFRsb6/kXHh7uWbdv3z5VVFRo2bJlGjJkiLKysjRr1ixt2bJFzc3NFhwRAADwN35zz47L5dL777+vxsZGpaamepbv3LlTv/nNbxQbG6vbb79d06ZN81zdKS0t1aBBg2S32z3bZ2ZmqqCgQBUVFRo6dGiHZwCAjrLZbFaPAPit7vzZ2t59Wx475eXl+tnPfqZz586pd+/eWrVqlRISEiRJ999/v+Li4tSvXz+Vl5dr+fLl+uqrr7Ry5UpJUk1NjVfoSPI8djqdHZ6lrKysi0cD4EoTFhbW4V+sgCtJeXm5mpqaLJ3B8tgZMGCAduzYofr6eu3evVv5+fnavHmzEhISlJOT49nO4XAoNjZWkydPVlVVlW644Qafz5KUlMRvaAAA+JDD4ei2fbtcrnZdqLA8dkJCQhQfHy9JSkxMVFlZmTZu3KhFixZdsG1ycrIk6ZtvvtENN9wgu92uw4cPe21TU1MjSYqNje3wLDabjdgBAMCH/OHnqt99gnJbW9tFby4+duyYpP8PmZSUFH3++eeqra31bLN//36Fh4d7XgoDAABXNkuv7Lz00ku67bbb1L9/fzU0NGjXrl06cOCA1q1bp6qqKu3cuVNZWVnq06ePysvLVVRUpFtuuUWDBw+W9P3NyAkJCZo7d67mzJkjp9OpFStWKDc3VyEhIVYeGgAA8BOWxk5tba3y8/NVXV2tiIgIORwOrVu3Trfeeqv++te/qqSkRBs3blRjY6P69++vu+66S9OmTfN8v81m05o1a1RQUKCcnByFhYUpOzvb63N5AADAlS3A7S9/pctCLpdLpaWlSklJ8YvXFgH0PKc//j1/LgL4B7aIvuo78t5ufY72/vz2u3t2AAAAfInYAQAARiN2AACA0YgdAABgNGIHAAAYjdgBAABGI3YAAIDRiB0AAGA0YgcAABiN2AEAAEYjdgAAgNGIHQAAYDRiBwAAGI3YAQAARiN2AACA0YgdAABgNGIHAAAYjdgBAABGI3YAAIDRiB0AAGA0YgcAABiN2AEAAEYjdgAAgNGIHQAAYDRiBwAAGI3YAQAARiN2AACA0YgdAABgNGIHAAAYjdgBAABGI3YAAIDRiB0AAGA0YgcAABiN2AEAAEYjdgAAgNGIHQAAYDRiBwAAGI3YAQAARrM0drZu3aoHHnhAaWlpSktLU05Ojj788EPP+nPnzqmwsFAjR45UamqqHn/8cdXU1Hjt4+TJk8rLy1NycrLS09O1dOlStba2Xu5DAQAAfsrS2Lnmmmv09NNP691339X27ds1atQoTZ8+XV988YUkacmSJfrjH/+oFStWaNOmTaqurtaMGTM83+9yuTR16lS1tLRo27ZtKi4u1nvvvadXX33VqkMCAAB+xtLYGTNmjLKysnTjjTdqwIABevLJJ9W7d2+Vlpaqvr5e27dv1zPPPKP09HQlJiZqyZIlOnTokEpLSyVJ+/btU0VFhZYtW6YhQ4YoKytLs2bN0pYtW9Tc3GzloQEAAD8RZPUA57lcLr3//vtqbGxUamqqjhw5opaWFmVkZHi2GThwoOLi4lRaWqqUlBSVlpZq0KBBstvtnm0yMzNVUFCgiooKDR06tMMzAEBH2Ww2q0cA/FZ3/mxt774tj53y8nL97Gc/07lz59S7d2+tWrVKCQkJOnbsmIKDgxUZGem1fUxMjJxOpySppqbGK3QkeR6f36YjysrKOnkUAK5UYWFhHf7FCriSlJeXq6mpydIZLI+dAQMGaMeOHaqvr9fu3buVn5+vzZs3WzJLUlISv6EBAOBDDoej2/btcrnadaHC8tgJCQlRfHy8JCkxMVFlZWXauHGj7r33XrW0tKiurs7r6k5tba1iY2MlfX8V5/Dhw177O/9urfPbdITNZiN2AADwIX/4uep3n7PT1tam5uZmJSYmKjg4WCUlJZ51lZWVOnnypFJSUiRJKSkp+vzzz1VbW+vZZv/+/QoPD1dCQsLlHh0AAPghS6/svPTSS7rtttvUv39/NTQ0aNeuXTpw4IDWrVuniIgIjRs3TsXFxYqKilJ4eLheeOEFpaamemInMzNTCQkJmjt3rubMmSOn06kVK1YoNzdXISEhVh4aAADwE5bGTm1trfLz81VdXa2IiAg5HA6tW7dOt956qyRp3rx5CgwM1MyZM9Xc3KzMzEwtXLjQ8/02m01r1qxRQUGBcnJyFBYWpuzsbM2cOdOqQwIAAH4mwO12u60ewmoul8vzdnZ/eG0RQM9z+uPfy1V/2uoxAL9hi+irviPv7dbnaO/Pb7+7ZwcAAMCXiB0AAGA0YgcAABiN2AEAAEYjdgAAgNGIHQAAYDRiBwAAGI3YAQAARiN2AACA0YgdAABgNGIHAAAYjdgBAABGI3YAAIDRiB0AAGA0YgcAABiN2AEAAEYjdgAAgNGIHQAAYDRiBwAAGI3YAQAARiN2AACA0YgdAABgNGIHAAAYjdgBAABGI3YAAIDRiB0AAGA0YgcAABiN2AEAAEYjdgAAgNGIHQAAYDRiBwAAGI3YAQAARiN2AACA0YgdAABgNGIHAAAYjdgBAABGI3YAAIDRiB0AAGA0YgcAABjN0th54403NG7cOKWmpio9PV3Tpk1TZWWl1zYPP/ywHA6H178FCxZ4bXPy5Enl5eUpOTlZ6enpWrp0qVpbWy/noQAAAD8VZOWTHzhwQLm5uUpKSpLL5dLLL7+sKVOm6Le//a169+7t2W7ChAmaOXOm53FYWJjna5fLpalTp8put2vbtm2qrq5Wfn6+goODNXv27Mt6PAAAwP9YGjvr1q3zelxcXKz09HQdPXpUt9xyi2d5aGioYmNjf3Af+/btU0VFhdavXy+73a4hQ4Zo1qxZWr58uWbMmKGQkJB2z+NyuTp3IACuaDabzeoRAL/VnT9b27tvS2Pnn9XX10uSoqKivJbv3LlTv/nNbxQbG6vbb79d06ZN81zdKS0t1aBBg2S32z3bZ2ZmqqCgQBUVFRo6dGi7n7+srMwHRwHgShIWFtah/88AV5ry8nI1NTVZOoPfxE5bW5uWLFmitLQ0DRo0yLP8/vvvV1xcnPr166fy8nItX75cX331lVauXClJqqmp8QodSZ7HTqezQzMkJSXxGxoAAD7kcDi6bd8ul6tdFyr8JnYKCwv1xRdfaOvWrV7Lc3JyPF87HA7FxsZq8uTJqqqq0g033ODTGWw2G7EDAIAP+cPPVb946/miRYv0wQcfaMOGDbrmmmsuuW1ycrIk6ZtvvpH0/VWcmpoar23OP77YfT4AAODKYWnsuN1uLVq0SH/4wx+0YcMGXX/99T/6PceOHZP0/yGTkpKizz//XLW1tZ5t9u/fr/DwcCUkJHTP4AAAoMew9GWswsJC7dq1S6tXr9ZVV13luccmIiJCoaGhqqqq0s6dO5WVlaU+ffqovLxcRUVFuuWWWzR48GBJ39+MnJCQoLlz52rOnDlyOp1asWKFcnNzO/ROLAAAYCZLY+fXv/61pO8/OPAfFRUV6cEHH1RwcLBKSkq0ceNGNTY2qn///rrrrrs0bdo0z7Y2m01r1qxRQUGBcnJyFBYWpuzsbK/P5QEAAFcuS2OnvLz8kuv79++vzZs3/+h+rr32Wq1du9ZXYwEAAIP4xQ3KAAAA3YXYAQAARiN2AACA0YgdAABgNGIHAAAYjdgBAABGI3YAAIDRiB0AAGA0YgcAABiN2AEAAEYjdgAAgNGIHQAAYDRiBwAAGI3YAQAARiN2AACA0YgdAABgNGIHAAAYjdgBAABGI3YAAIDRiB0AAGA0YgcAABiN2AEAAEYjdgAAgNGIHQAAYDRiBwAAGI3YAQAARiN2AACA0YgdAABgNGIHAAAYjdgBAABGI3YuE7fbbfUIgF/i3ADQ3YKsHuBKERAQoE+++rvqzzZbPQrgNyJCQzRiwNVWjwHAcMTOZVR/tlnfNhE7AABcTryMBQAAjEbsAAAAoxE7AADAaMQOAAAwWqdiZ+LEiaqrq7tg+XfffaeJEyd2eSgAAABf6VTsHDhwQC0tLRcsP3funD799NN27+eNN97QuHHjlJqaqvT0dE2bNk2VlZUX7LOwsFAjR45UamqqHn/8cdXU1Hhtc/LkSeXl5Sk5OVnp6elaunSpWltbO3NoAADAMB166/lnn33m+bqiokJOp9PzuK2tTXv37tXVV7f/MzMOHDig3NxcJSUlyeVy6eWXX9aUKVP029/+Vr1795YkLVmyRB9++KFWrFihiIgILV68WDNmzNC2bdskSS6XS1OnTpXdbte2bdtUXV2t/Px8BQcHa/bs2R05PAAAYKAOxc6//Mu/KCAgQAEBAZo0adIF60NDQzV//vx272/dunVej4uLi5Wenq6jR4/qlltuUX19vbZv367ly5crPT1d0vfxc99996m0tFQpKSnat2+fKioqtH79etntdg0ZMkSzZs3S8uXLNWPGDIWEhHTkEAEAgGE6FDv/8z//I7fbrTvuuENvv/22oqOjPeuCg4MVExMjm83W6WHq6+slSVFRUZKkI0eOqKWlRRkZGZ5tBg4cqLi4OE/slJaWatCgQbLb7Z5tMjMzVVBQoIqKCg0dOrTdz+9yuTo9+4/pyn8XwHTdee5dDpzfwMV15/nd3n13KHauvfZaSd4vZ/lKW1ublixZorS0NA0aNEiSVFNTo+DgYEVGRnptGxMT43kJraamxit0JHke/+PLbO1RVlbW2fEvKSwsrEPRBVxpysvL1dTUZPUYncL5DVyaP5zfnf5zEV9//bU+/vhj1dbWqq2tzWvdjBkzOry/wsJCffHFF9q6dWtnR+qypKQkfkMDLOBwOKweAUA36c7z2+VytetCRadi56233lJBQYH69u0ru92ugIAAz7qAgIAOx86iRYv0wQcfaPPmzbrmmms8y+12u1paWlRXV+d1dae2tlaxsbGebQ4fPuy1v/Pv1jq/TXvZbDZiB7AA5x1gLn84vzsVO6+//rqeeOIJ5eXldenJ3W63Fi9erD/84Q/atGmTrr/+eq/1iYmJCg4OVklJie6++25JUmVlpU6ePKmUlBRJUkpKitasWaPa2lrFxMRIkvbv36/w8HAlJCR0aT4AANDzdSp2vv32W917771dfvLCwkLt2rVLq1ev1lVXXeW5xyYiIkKhoaGKiIjQuHHjVFxcrKioKIWHh+uFF15QamqqJ3YyMzOVkJCguXPnas6cOXI6nVqxYoVyc3N5JxYAAOhc7Nxzzz3at2+fHnrooS49+a9//WtJ0sMPP+y1vKioSA8++KAkad68eQoMDNTMmTPV3NyszMxMLVy40LOtzWbTmjVrVFBQoJycHIWFhSk7O1szZ87s0mwAAMAMnYqd+Ph4vfLKK/rzn/+sQYMGKSjIezft/ZMR5eXlP7pNr169tHDhQq/A+WfXXnut1q5d267nBAAAV5ZOxc6bb76p3r1768CBAzpw4IDXuoCAAP4+FgAA8Budip3//d//9fUcAAAA3aJTfwgUAACgp+jUlZ1nn332kuuLioo6NQwAAICvdSp26urqvB63trbqiy++UF1dnUaNGuWTwQAAAHyhU7GzatWqC5a1tbWpoKDggg8GBAAAsJLP7tkJDAzU5MmTtWHDBl/tEgAAoMt8eoPy8ePH1dra6stdAgAAdEmnXsb65xuQ3W63nE6nPvjgA2VnZ/tkMAAAAF/oVOz85S9/8XocGBio6OhoPfPMMxo3bpxPBgMAAPCFTsXOpk2bfD0HAABAt+hU7Jx36tQpVVZWSpJuuukmRUdH+2QoAAAAX+lU7DQ2Nmrx4sX6r//6L7W1tUn6/q+P//SnP9Xzzz+vsLAwnw4JAADQWZ16N1ZxcbEOHjyo119/XZ988ok++eQTrV69WgcPHlRxcbGvZwQAAOi0TsXO7t279e///u/KyspSeHi4wsPDlZWVpcWLF2v37t2+nhEAAKDTOhU7Z8+eld1uv2B5TEyMzp492+WhAAAAfKVTsZOSkqJXX31V586d8yw7e/asVq5cqZSUFF/NBgAA0GWdukF53rx5evTRR3Xbbbdp8ODBkqTPPvtMISEh+tWvfuXTAQEAALqiU7HjcDj03//939q5c6fnref333+/HnjgAYWGhvp0QAAAgK7oVOy88cYbiomJ0YQJE7yWv/POOzp16pTy8vJ8MhwAAEBXdeqenTfffFM33XTTBctvvvlmbdu2rctDAQAA+EqnYsfpdCo2NvaC5dHR0XI6nV0eCgAAwFc6FTv9+/fXn/70pwuWf/rpp+rXr1+XhwIAAPCVTt2zM378eC1ZskStra0aNWqUJKmkpETLli3Tv/7rv/p0QAAAgK7oVOw8+uijOnPmjAoLC9XS0iJJ6tWrlx599FFNnTrVpwMCAAB0RadiJyAgQHPmzNG0adP05ZdfKjQ0VDfeeKNCQkJ8PR8AAECXdCp2zrvqqqs0fPhwX80CAADgc526QRkAAKCnIHYAAIDRiB0AAGA0YgcAABiN2AEAAEYjdgAAgNGIHQAAYDRiBwAAGI3YAQAARiN2AACA0YgdAABgNEtj5+DBg3rssceUmZkph8OhPXv2eK1/5pln5HA4vP5NmTLFa5szZ87oqaeeUlpamkaMGKF58+apoaHhch4GAADwY136Q6Bd1djYKIfDoXHjxmnGjBk/uM3o0aNVVFTkefzPf1n96aefltPp1Pr169XS0qJ58+ZpwYIFeumll7p1dgAA0DNYGjtZWVnKysq65DYhISGKjY39wXVffvml9u7dq3feeUdJSUmSpPnz5ysvL09z587V1Vdf7fOZAQBAz2Jp7LTHgQMHlJ6ersjISI0aNUpPPPGE+vbtK0k6dOiQIiMjPaEjSRkZGQoMDNThw4d15513dui5XC6XT2f/Rzabrdv2DfR03XnuXQ6c38DFdef53d59+3XsjB49Wnfeeaeuu+46HT9+XC+//LJ+/vOf680335TNZlNNTY2io6O9vicoKEhRUVFyOp0dfr6ysjJfje4lLCxMQ4cO7ZZ9AyYoLy9XU1OT1WN0Cuc3cGn+cH77deyMHTvW8/X5G5TvuOMOz9UeX0tKSuI3NMACDofD6hEAdJPuPL9dLle7LlT4dez8s+uvv159+/bVN998o/T0dNntdp06dcprm9bWVn377bcXvc/nUmw2G7EDWIDzDjCXP5zfPepzdv72t7/pzJkznpBJTU1VXV2djhw54tnmo48+Ultbm4YPH27VmAAAwI9YemWnoaFBVVVVnscnTpzQsWPHFBUVpaioKK1cuVJ333237Ha7jh8/rmXLlik+Pl6jR4+WJA0cOFCjR4/W888/r8LCQrW0tGjx4sUaO3Ys78QCAACSLI6dI0eOaOLEiZ7H5z9PJzs7WwUFBfr888+1Y8cO1dfXq1+/frr11ls1a9Ysr8/aWb58uRYvXqxJkyYpMDBQd911l+bPn3/ZjwUAAPgnS2Nn5MiRKi8vv+j6devW/eg++vTpwwcIAgCAi+pR9+wAAAB0FLEDAACMRuwAAACjETsAAMBoxA4AADAasQMAAIxG7AAAAKMROwAAwGjEDgAAMBqxAwAAjEbsAAAAoxE7AADAaMQOAAAwGrEDAACMRuwAAACjETsAAMBoxA4AADAasQMAAIxG7AAAAKMROwAAwGjEDgAAMBqxAwAAjEbsAAAAoxE7AADAaMQOAAAwGrEDAACMRuwAAACjETsAAMBoxA4AADAasQMAAIxG7AAAAKMROwAAwGjEDgAAMBqxAwAAjEbsAAAAoxE7AADAaMQOAAAwGrEDAACMRuwAAACjWRo7Bw8e1GOPPabMzEw5HA7t2bPHa73b7dYrr7yizMxMDR8+XJMnT9bXX3/ttc2ZM2f01FNPKS0tTSNGjNC8efPU0NBwGY8CAAD4M0tjp7GxUQ6HQwsXLvzB9WvXrtWmTZtUUFCgt956S2FhYZoyZYrOnTvn2ebpp59WRUWF1q9frzVr1uiTTz7RggULLtchAAAAPxdk5ZNnZWUpKyvrB9e53W5t3LhR//Zv/6Y77rhDkvTiiy8qIyNDe/bs0dixY/Xll19q7969euedd5SUlCRJmj9/vvLy8jR37lxdffXVHZrH5XJ17YAuwWazddu+gZ6uO8+9y4HzG7i47jy/27tvS2PnUk6cOCGn06mMjAzPsoiICCUnJ+vQoUMaO3asDh06pMjISE/oSFJGRoYCAwN1+PBh3XnnnR16zrKyMp/N/4/CwsI0dOjQbtk3YILy8nI1NTVZPUancH4Dl+YP57ffxo7T6ZQkxcTEeC2PiYlRTU2NJKmmpkbR0dFe64OCghQVFeX5/o5ISkriNzTAAg6Hw+oRAHST7jy/XS5Xuy5U+G3sWMFmsxE7gAU47wBz+cP57bdvPY+NjZUk1dbWei2vra2V3W6XJNntdp06dcprfWtrq7799lvP9wMAgCub38bOddddp9jYWJWUlHiWfffdd/rzn/+s1NRUSVJqaqrq6up05MgRzzYfffSR2traNHz48Ms+MwAA8D+WvozV0NCgqqoqz+MTJ07o2LFjioqKUlxcnCZOnKjXX39d8fHxuu666/TKK6+oX79+nndnDRw4UKNHj9bzzz+vwsJCtbS0aPHixRo7dmyH34kFAADMZGnsHDlyRBMnTvQ8LioqkiRlZ2eruLhYP//5z9XU1KQFCxaorq5OP/nJT/TLX/5SvXr18nzP8uXLtXjxYk2aNEmBgYG66667NH/+/Mt+LAAAwD8FuN1ut9VDWM3lcqm0tFQpKSndeiPVH48d17dNzd22f6CniQoL0e1Drrd6DJ84/fHv5ao/bfUYgN+wRfRV35H3dutztPfnt9/eswMAAOALxA4AADAasQMAAIxG7AAAAKMROwAAwGjEDgAAMBqxAwAAjEbsAAAAoxE7AADAaMQOAAAwGrEDAACMRuwAAACjETsAAMBoxA4AADAasQMAAIxG7AAAAKMROwAAwGjEDgAAMBqxAwAAjEbsAAAAoxE7AADAaMQOAAAwGrEDAACMRuwAAACjETsAAMBoxA4AADAasQMAAIxG7AAAAKMROwAAwGjEDgAAMBqxAwAAjEbsAAAAoxE7AADAaMQOAAAwGrEDAACMRuwAAACjETsAAMBoxA4AADCaX8fOa6+9JofD4fXvnnvu8aw/d+6cCgsLNXLkSKWmpurxxx9XTU2NhRMDAAB/E2T1AD/m5ptv1vr16z2PbTab5+slS5boww8/1IoVKxQREaHFixdrxowZ2rZtmxWjAgAAP+T3sWOz2RQbG3vB8vr6em3fvl3Lly9Xenq6pO/j57777lNpaalSUlI6/Fwul6ur417UP0YaAG/dee5dDpzfwMV15/nd3n37fex88803yszMVK9evZSSkqKnnnpKcXFxOnLkiFpaWpSRkeHZduDAgYqLi+t07JSVlflw8v8XFhamoUOHdsu+AROUl5erqanJ6jE6hfMbuDR/OL/9OnaGDx+uoqIiDRgwQE6nU6tWrVJubq527typmpoaBQcHKzIy0ut7YmJi5HQ6O/V8SUlJ/IYGWMDhcFg9AoBu0p3nt8vlateFCr+OnaysLM/XgwcPVnJysm6//Xb9/ve/V2hoqM+fz2azETuABTjvAHP5w/nt1+/G+meRkZG68cYbVVVVJbvdrpaWFtXV1XltU1tb+4P3+AAAgCtTj4qdhoYGHT9+XLGxsUpMTFRwcLBKSko86ysrK3Xy5MlO3a8DAADM5NcvYy1dulS333674uLiVF1drddee02BgYG6//77FRERoXHjxqm4uFhRUVEKDw/XCy+8oNTUVGIHAAB4+HXs/O1vf9Ps2bN15swZRUdH6yc/+YneeustRUdHS5LmzZunwMBAzZw5U83NzcrMzNTChQstnhoAAPgTv46dX/ziF5dc36tXLy1cuJDAAQAAF9Wj7tkBAADoKGIHAAAYjdgBAABGI3YAAIDRiB0AAGA0YgcAABiN2AEAAEYjdgAAgNGIHQAAYDRiBwAAGI3YAQAARiN2AACA0YgdAABgNGIHAAAYjdgBAABGI3YAAIDRiB0AAGA0YgcAABiN2AEAAEYjdgAAgNGIHQAAYDRiBwAAGI3YAQAARiN2AACA0YgdAABgNGIHAAAYjdgBAABGI3YAAIDRiB0AAGA0YgcAABiN2AEAAEYjdgAAgNGIHQAAYDRiBwAAGI3YAQAARiN2AACA0YgdAABgNGIHAAAYzZjY2bJli8aMGaOkpCSNHz9ehw8ftnokAADgB4yInd/97ncqKirS9OnT9d5772nw4MGaMmWKamtrrR4NAABYzIjYWb9+vSZMmKBx48YpISFBhYWFCg0N1fbt260eDQAAWCzI6gG6qrm5WUePHtXUqVM9ywIDA5WRkaFDhw61ax9ut9uzL5vN1i1z2mw2RfQKktxt3bJ/oCeK6BUkl8sll8tl9ShdYrPZFNA7SgEKsHoUwG8E9I7s9vP7/L7P/xy/mB4fO6dPn5bL5VJMTIzX8piYGFVWVrZrH21t3wfIX/7yF5/P948CJEV26zMAPUyTVHr6pNVT+EgvKSjW6iEA/9EsqbT0sjzV+Z/jF9PjY8cXgoKClJSUpMDAQAUE8JsZAAA9gdvtVltbm4KCLp0zPT52+vbtK5vNdsHNyLW1tbLb7e3aR2BgoEJCQrpjPAAAYLEef4NySEiIhg0bppKSEs+ytrY2lZSUKDU11cLJAACAP+jxV3Yk6ZFHHlF+fr4SExM1fPhwbdiwQU1NTXrwwQetHg0AAFjMiNi57777dOrUKb366qtyOp0aMmSIfvnLX7b7ZSwAAGCuAPePvV8LAACgB+vx9+wAAABcCrEDAACMRuwAAACjETsAAMBoxA6uKFu2bNGYMWOUlJSk8ePH6/Dhw1aPBMAHDh48qMcee0yZmZlyOBzas2eP1SPBjxA7uGL87ne/U1FRkaZPn6733ntPgwcP1pQpUy749G0APU9jY6McDocWLlxo9SjwQ7z1HFeM8ePHKykpSQsWLJD0/SdtZ2Vl6eGHH1ZeXp7F0wHwFYfDoVWrVumOO+6wehT4Ca7s4IrQ3Nyso0ePKiMjw7MsMDBQGRkZOnTokIWTAQC6G7GDK8Lp06flcrkUExPjtTwmJkY1NTUWTQUAuByIHQAAYDRiB1eEvn37ymazXXAzcm1tLX9DDQAMR+zgihASEqJhw4appKTEs6ytrU0lJSVKTU21cDIAQHcz4q+eA+3xyCOPKD8/X4mJiRo+fLg2bNigpqYmPfjgg1aPBqCLGhoaVFVV5Xl84sQJHTt2TFFRUYqLi7NwMvgD3nqOK8rmzZu1bt06OZ1ODRkyRPPnz1dycrLVYwHooo8//lgTJ068YHl2draKi4stmAj+hNgBAABG454dAABgNGIHAAAYjdgBAABGI3YAAIDRiB0AAGA0YgcAABiN2AEAAEYjdgAAgNGIHQAAYDT+NhYAv+F0OrVmzRp98MEH+vvf/66YmBgNGTJEkyZNUnp6utXjAeih+HMRAPzCiRMn9NBDDykyMlIzZ87UoEGD1Nraqn379unNN9/U+++/b/WIP6i5uVkhISFWjwHgEngZC4BfKCwsVEBAgN5++23dfffdGjBggG6++WY98sgjeuuttyRJ69ev1wMPPKCUlBRlZWWpoKBADQ0Nnn28++67GjFihPbu3at7771XqampmjJliqqrq72e65133tHYsWOVmJiozMxMLVq0yLOurq5Ozz33nEaNGqW0tDRNnDhRn332mWf9a6+9pp/+9Kd6++23NWbMGA0fPryb/8sA6CpiB4Dlzpw5o7179yo3N1e9e/e+YH1kZKQkKSAgQM8995x27dql4uJiffTRR1q2bJnXtmfPntWvfvUrvfjii9q8ebP++te/aunSpZ71W7du1aJFizRhwgTt3LlTq1ev1g033OBZP2vWLNXW1mrt2rV69913NWzYME2aNElnzpzxbFNVVaXdu3dr5cqV2rFjh2//YwDwOe7ZAWC5qqoqud1u3XTTTZfcbvLkyZ6vr7vuOj3xxBNauHChCgoKPMtbWlpUWFjoCZjc3FytXr3as/7111/XI488okmTJnmWnb8688knn+jw4cMqKSnxvDSVn5+vPXv2aPfu3crJyfE8x4svvqjo6OguHTeAy4PYAWC59t46uH//fr3xxhuqrKzUd999J5fLpXPnzqmpqUlhYWGSpLCwMK8rNf369VNtba0kqba2VtXV1Re92bm8vFyNjY0aOXKk1/KzZ8+qqqrK8zguLo7QAXoQYgeA5eLj4xUQEKDKysqLbnPixAlNnTpVDz30kJ588klFRUXp008/1XPPPaeWlhZP7AQFef9vLSAgwBNTvXr1uuQcDQ0Nio2N1aZNmy5YFxER4fn6/HMB6Bm4ZweA5fr06aPMzExt2bJFjY2NF6yvq6vT0aNH5Xa79cwzzyglJUUDBgy44MbjHxMeHq5rr71WJSUlP7h+2LBhqqmpkc1mU3x8vNc/ruQAPRexA8AvLFy4UG1tbRo/frx2796tr7/+Wl9++aU2btyonJwcxcfHq6WlRZs2bdLx48e1Y8cObdu2rcPP8/jjj2v9+vXauHGjvv76ax09etRzJScjI0MpKSmaPn269u3bpxMnTuhPf/qTfvGLX6isrMzXhwzgMuFlLAB+4frrr9e7776rNWvWaOnSpaqurlZ0dLSGDRumgoICDR48WM8++6zWrl2rl19+WSNGjNDs2bOVn5/foefJzs7WuXPn9J//+Z968cUX1adPH91zzz2Svn/J6z/+4z+0YsUKPfvsszp9+rTsdrtGjBghu93eHYcN4DLgQwUBAIDReBkLAAAYjdgBAABGI3YAAIDRiB0AAGA0YgcAABiN2AEAAEYjdgAAgNGIHQAAYDRiBwAAGI3YAQAARiN2AACA0f4PC0h9lUOwcE0AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l=list(df.columns[0:10])\n",
        "for i in range(len(l)-1):\n",
        "    sns.boxplot(x='Cancer',y=l[i], data=df, palette='winter')\n",
        "    plt.figure()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Pk4SDWPHvv_J",
        "outputId": "8eb95786-cc1a-405a-8a99-f5bba37d582b"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-13-d0889b174aff>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.boxplot(x='Cancer',y=l[i], data=df, palette='winter')\n",
            "<ipython-input-13-d0889b174aff>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.boxplot(x='Cancer',y=l[i], data=df, palette='winter')\n",
            "<ipython-input-13-d0889b174aff>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.boxplot(x='Cancer',y=l[i], data=df, palette='winter')\n",
            "<ipython-input-13-d0889b174aff>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.boxplot(x='Cancer',y=l[i], data=df, palette='winter')\n",
            "<ipython-input-13-d0889b174aff>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.boxplot(x='Cancer',y=l[i], data=df, palette='winter')\n",
            "<ipython-input-13-d0889b174aff>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.boxplot(x='Cancer',y=l[i], data=df, palette='winter')\n",
            "<ipython-input-13-d0889b174aff>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.boxplot(x='Cancer',y=l[i], data=df, palette='winter')\n",
            "<ipython-input-13-d0889b174aff>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.boxplot(x='Cancer',y=l[i], data=df, palette='winter')\n",
            "<ipython-input-13-d0889b174aff>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.boxplot(x='Cancer',y=l[i], data=df, palette='winter')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjIAAAGwCAYAAACzXI8XAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAJzFJREFUeJzt3X9Q1Pedx/HXsoioIKuCo4ClhgmQUaKbM2P0MMwR2zS1N614idM6MYJjL9Ek0NKGGM8omgQxJcU2pvklNGqS1lbiNGka25QmSkqj18P4o4qtEJGgJ3BujBIRdvf+sOyVE5XVXb/7gedjJiN8v19232YFn36/3/1+bV6v1ysAAAADhVk9AAAAwNUiZAAAgLEIGQAAYCxCBgAAGIuQAQAAxiJkAACAsQgZAABgrHCrBwg2j8ejrq4uhYWFyWazWT0OAADoA6/XK4/Ho/DwcIWFXXq/S78Pma6uLu3bt8/qMQAAwFVIT09XRETEJdf3+5Dprrj09HTZ7XaLpwEAAH3hdru1b9++y+6NkQZAyHQfTrLb7YQMAACGudJpIZzsCwAAjEXIAAAAYxEyAADAWIQMAAAwFiEDAACMRcgAAABjETIAAMBYhAwAADAWIQMAAIzV76/si4HD7XartrZWra2tio2NldPp5GrOANDPETLoF6qqqlRWVqbm5mbfsvj4eOXn5ysrK8vCyQAAwcShJRivqqpKhYWFSk5OVkVFhXbs2KGKigolJyersLBQVVVVVo8IAAgSm9fr9Vo9RDC53W7t2bNHkydP5jBDP+R2uzV79mwlJyertLS0x11SPR6PCgoKVF9fr8rKSl5/ADBIX//+Zo8MjFZbW6vm5mbl5uZedKv3sLAw5eTk6JNPPlFtba1FEwIAgomQgdFaW1slScnJyb2u717evR0AoH8hZGC02NhYSdKRI0d6Xd+9vHs7AED/QsjAaE6nU/Hx8SovL5fH4+mxzuPxqKKiQgkJCXI6nRZNCAAIJkIGRrPb7crPz1d1dbUKCgq0d+9enT17Vnv37lVBQYGqq6uVl5fHib4A0E9xHRkYLysrSyUlJSorK1Nubq5veUJCgkpKSriODAD0Y4QM+oWsrCxlZmZyZV8AGGA4tAQAAIzFHhn0C9yiAAAGJvbIwHjcogAABi5CBkZzu90qKytTRkaG1q5dq46ODu3YsUMdHR1au3atMjIytG7dOrndbqtHBQAEAYeWYLTuWxTMnj1bc+bMuejQ0uzZs7Vz507V1tZqypQpFk4KAAgG9sjAaN23Hli/fn2vh5bWr1/fYzsAQP9CyMBoI0eOlCRNmjRJpaWlSk9P19ChQ5Wenq7S0lJNmjSpx3YAgP6FkEG/YLPZ/FoOAOgfCBkY7X/+538kSR999FGvtyj46KOPemwHAOhfONkXRuu+q/XixYv1xhtvXHSLgsWLF2v9+vXc/RoA+ilCBkbrvvv13r17tXXrVn300Ue+WxRMmjRJjzzyCHe/BoB+jENLMNo/3v36kUceUUREhGbMmKGIiAg98sgj3P0aAPo59sjAeNz9GgAGLkIG/QJ3vwaAgYmQQb9ht9u5ei8ADDCcIwMAAIxFyAAAAGMRMgAAwFiEDAAAMBYhAwAAjEXIAAAAYxEyAADAWIQMAAAwFiEDAACMRcgAAABjETIAAMBYhAwAADAWIQMAAIxFyAAAAGMRMgAAwFiEDAAAMFa41QMgdDQ1NenMmTNWj4G/i4qKUmJiotVjAEBII2QgSXK5XMrOzpbH47F6FPyd3W7X9u3b5XA4rB4FAEIWIQNJksPhUGVlpfF7ZBoaGrR8+XKtXr1a48ePt3qcaxIVFUXEAMAVEDLw6U+HMcaPH6+0tDSrxwAABBkn+wIAAGMRMgAAwFiEDAAAMBYhAwAAjEXIAAAAY1n6rqUXXnhBv/3tb1VfX6/IyEg5nU5973vf0w033ODb5t5779WuXbt6fN3cuXO1atWq6z0uAAAIMZaGzK5duzRv3jylp6fL7XbrmWee0cKFC/XrX/9aQ4cO9W13zz336OGHH/Z9PmTIECvGBQAAIcbSkNmwYUOPz9esWaNp06bpwIEDuvXWW33LIyMjFRcXd03P5Xa7r+nrYYbu19ntdvOaA4DB+vozPKQuiPfZZ59JkmJiYnosf/PNN/WrX/1KcXFx+pd/+RctXrzY770y+/btC9icCF2NjY2SpMOHD+vcuXMWTwMACLaQCRmPx6OnnnpKt9xyi1JSUnzLv/a1ryk+Pl6jR49WXV2dfvCDH6ihoUHPPvusX4+fnp4uu90e6LERYiIjIyVJKSkpXNkXAAzmdrv7tBMiZEKmqKhIf/3rX/Xaa6/1WD537lzfx6mpqYqLi9OCBQvU2NioL3zhC31+fLvdTsgMAN2vMa83AAwMIfH261WrVum9997TK6+8ojFjxlx220mTJkmSjh49ej1GAwAAIczSPTJer1erV6/W7373O23atEnjxo274tccPHhQkq755F8AAGA+S0OmqKhIb731lp577jkNGzZMLS0tkqTo6GhFRkaqsbFRb775pjIzM+VwOFRXV6fi4mLdeuutnP8AAACsDZnXX39d0oWL3v2j4uJiZWdna9CgQaqpqdHGjRvV3t6usWPH6stf/rIWL15sxbgAACDEWBoydXV1l10/duxYbd68+TpNAwAATBMSJ/sCAABcDUIGAAAYi5ABAADGImQAAICxCBkAAGAsQgYAABiLkAEAAMYiZAAAgLEIGQAAYCxCBgAAGIuQAQAAxiJkAACAsQgZAABgLEIGAAAYi5ABAADGImQAAICxCBkAAGAsQgYAABiLkAEAAMYiZAAAgLEIGQAAYCxCBgAAGIuQAQAAxiJkAACAsQgZAABgLEIGAAAYi5ABAADGImQAAICxCBkAAGAsQgYAABiLkAEAAMYiZAAAgLEIGQAAYCxCBgAAGIuQAQAAxiJkAACAsQgZAABgLEIGAAAYi5ABAADGImQAAICxCBkAAGAsQgYAABiLkAEAAMYiZAAAgLEIGQAAYCxCBgAAGIuQAQAAxiJkAACAsQgZAABgLEIGAAAYi5ABAADGImQAAICxCBkAAGAsQgYAABiLkAEAAMYiZAAAgLEIGQAAYCxCBgAAGIuQAQAAxiJkAACAsQgZAABgLEIGAAAYi5ABAADGImQAAICxCBkAAGAsQgYAABiLkAEAAMYiZAAAgLEsDZkXXnhBc+bMkdPp1LRp07R48WLV19f32Kajo0NFRUWaOnWqnE6nHnroIbW2tlo0MQAACCUBCZnTp09f1dft2rVL8+bN05YtW1RRUaGuri4tXLhQ7e3tvm2eeuop/eEPf1BZWZk2bdqkkydP6sEHHwzE2AAAwHB+h8yLL76ot99+2/d5Xl6epk6dqhkzZujQoUN+PdaGDRuUnZ2tG2+8UWlpaVqzZo2am5t14MABSdJnn32mrVu36tFHH9W0adM0ceJEPfXUU6qtrdWePXv8HR0AAPQz4f5+wc9+9jP94Ac/kCR98MEH+uMf/6iXXnpJv/nNb7R27VqVl5df9TCfffaZJCkmJkaStH//fnV2dmr69Om+bZKTkxUfH689e/Zo8uTJfX5st9t91XPBHN2vs9vt5jUHAIP19We43yHT2tqqsWPHSpL+8Ic/6K677lJGRoYSEhJ0zz33+PtwPh6PR0899ZRuueUWpaSk+J5r0KBBGj58eI9tR40apZaWFr8ef9++fVc9G8zR2NgoSTp8+LDOnTtn8TQAgGDzO2SGDx+u48ePa+zYsdq5c6fy8/MlSV6v95r+BVxUVKS//vWveu211676MS4nPT1ddrs9KI+N0BEZGSlJSklJUVpamsXTAACultvt7tNOCL9D5stf/rK+973vKSkpSS6XS7fffrsk6eDBg0pKSvJ/UkmrVq3Se++9p82bN2vMmDG+5bGxsers7NTp06d77JVpa2tTXFycX89ht9sJmQGg+zXm9QaAgcHvk32XLl2qefPmKTk5WRUVFRo2bJgkqaWlRd/61rf8eiyv16tVq1bpd7/7nV555RWNGzeux/qJEydq0KBBqqmp8S2rr69Xc3OzX+fHAACA/snvPTKDBg3SwoULL1q+YMECv5+8qKhIb731lp577jkNGzbMd95LdHS0IiMjFR0drTlz5mjNmjWKiYlRVFSUnnjiCTmdTkIGAAD4HzLbtm277PpvfOMbfX6s119/XZJ077339lheXFys7OxsSdJjjz2msLAwPfzwwzp//rwyMjK0YsUKv2a+Hk6cOCGXy2X1GANeQ0NDj19hLYfD0eNwMQAEms3r9Xr9+YJbb721x+ddXV36/PPPNWjQIA0ZMkS7du0K6IDXyu12+96qHaxzJk6cOKHs7Dk6f74jKI8PmCoiYrAqK7cSMwD81te/v/3eI7N79+6Lln388cdauXJlr4ecBgKXy6Xz5zvkGnuPuiJGWz0OEBLCz5+U4/gWuVwuQgZA0PgdMr354he/qIKCAn3/+9/XO++8E4iHNFJXxGh1RSZYPQYAAANGwG4aGR4erpMnTwbq4QAAAK7I7z0yv//973t87vV61dLSoldffVW33HJLwAYDAAC4Er9DZsmSJT0+t9lsGjlypG677TYVFhYGbDAAAIAr8Ttk/L3DNQAAQLAE7BwZAACA661Pe2SKi4uVl5enoUOHqri4+LLbLl26NCCDAQAAXEmfQuYvf/mLurq6fB9fis1mC8xUAAAAfdCnkNm0aVOvHwMAAFiJc2QAAICx+rRH5sEHH+zzAz777LNXPQwAAIA/+rRHJjo62vdfVFSUampqtH//ft/6AwcOqKamRtHR0UEbFAAA4P/r87uWuj399NO66667VFRU5LsbpdvtVlFRkYYNGxacKQEAAHrh9zkyW7duVW5ubo9batvtdi1YsECVlZUBHQ4AAOBy/A4Zt9ut+vr6i5bX19fL4/EEZCgAAIC+8PsWBdnZ2Vq2bJmOHTum9PR0SdLevXv14osvKjs7O+ADAgAAXIrfIVNYWKjY2FiVl5erpaVFkhQXF6eFCxcqNzc34AMCAABcit8hExYWpkWLFmnRokU6c+aMJCkqKirggwEAAFyJ3yHzjwgYAABgpasKmXfeeUe/+c1vdPz4cXV2dvZY98YbbwRkMAAAgCvx+11LGzdu1NKlSxUbG6u//OUvSk9Pl8Ph0LFjx3T77bcHY0YAAIBe+b1H5rXXXtPq1av1ta99TZWVlVq0aJHGjRundevW6dNPPw3GjACAAc7tdqu2tlatra2KjY2V0+nscT0zDFx+h8zx48fldDolSZGRkTp79qwk6etf/7rmzp2rxx9/PLATAgAGtKqqKpWVlam5udm3LD4+Xvn5+crKyrJwMoQCvw8txcbG+va8jB07Vnv27JEkNTU1yev1BnQ4AMDAVlVVpcLCQiUnJ6uiokI7duxQRUWFkpOTVVhYqKqqKqtHhMX8DpnbbrvN9wdnzpw5Ki4uVk5Ojr7zne9o5syZAR8QADAwud1ulZWVKSMjQ6WlpUpPT9fQoUOVnp6u0tJSZWRkaN26dXK73VaPCgv5fWhp9erVvlsRzJs3Tw6HQ7W1tcrKytLcuXMDPiAAYGCqra1Vc3OznnzySYWF9fx3d1hYmHJycpSbm6va2lpNmTLFoilhNb9CpqurS88//7z+7d/+TWPGjJEkzZo1S7NmzQrKcACAgau1tVWSlJyc3Ov67uXd22Fg8uvQUnh4uDZs2KCurq5gzQMAgKQL52RK0pEjR3pd3728ezsMTFd1jszu3buDMQsAAD5Op1Px8fEqLy/3ndLQzePxqKKiQgkJCb530mJg8vscmdtvv12lpaU6fPiwJkyYoCFDhvRYf8cddwRsOADAwGW325Wfn6/CwkIVFBQoJydHycnJOnLkiCoqKlRdXa2SkhKuJzPA+R0yRUVFkqSKioqL1tlsNh08ePDapwIAQFJWVpZKSkpUVlam3Nxc3/KEhASVlJRwHRn4HzKHDh0KxhwAAPQqKytLmZmZXNkXvbqmu18DAHA92O123mKNXhEyAWTvOGn1CEDI4PsBwPVAyATQiBNbrB4BAIABhZAJoFNj7pF78GirxwBCgr3jJHEPIOgImQByDx6trsgEq8cAAGDAuKqQ8Xg8Onr0qNra2i664/Wtt94akMEAAOjmdrt51xJ65XfI7NmzRwUFBWpubr4oYriODAAg0KqqqlRWVqbm5mbfsvj4eOXn53MdGfgfMitWrNDEiRP14osvKi4uTjabLRhzAQCgqqoqFRYWKiMjQ08++aTvyr7l5eUqLCzkonjwP2SOHj2qH/3oR0pKSgrGPAAASLpwOKmsrEwZGRkqLS1VWNiF2wOmp6ertLRUBQUFWrdunTIzMznMNID5fdPIm2++WUePHg3GLAAA+NTW1qq5uVm5ubm+iOkWFhamnJwcffLJJ6qtrbVoQoQCv/fI3HvvvSopKVFra6tSUlIUHt7zIdLS0gI2HABg4GptbZUkJScn97q+e3n3dhiY/A6Zhx56SJL02GOP+ZbZbDZ5vV5O9gUABExsbKwk6ciRI0pPT79o/ZEjR3psh4HJ75D5/e9/H4w5AADowel0Kj4+XuXl5T3OkZEuXAakoqJCCQkJcjqdFk4Jq/kdMgkJXPANABB8drtd+fn5KiwsVEFBgXJycnzvWqqoqFB1dbVKSko40XeAu+or+/7tb39Tc3OzOjs7eyy/4447rnkoAAAkKSsrSyUlJSorK1Nubq5veUJCAm+9hqSrCJljx45pyZIlOnz4sO/cGEm+68lwjgwAhJ6mpiadOXPG6jGuSnx8vNasWaNDhw7J5XLJ4XAoLS1NYWFhOnTokNXjXZWoqCglJiZaPUa/4HfIPPnkk0pMTNRPf/pT3XHHHfrlL3+pU6dOqaSkRIWFhcGYEQBwDVwul7Kzs+XxeKweBX9nt9u1fft2ORwOq0cxnt8hU1tbq1deeUUjR45UWFiYbDabpkyZou9+97t64okntG3btiCMCQC4Wg6HQ5WVlcbukenW0NCg5cuXa/Xq1Ro/frzV41yTqKgoIiZA/A4Zj8ejYcOGSZJGjBihkydP6oYbblBCQoIaGhoCPiAA4Nr1p8MY48eP55pl8PE7ZG688UbV1dVp3LhxmjRpkl5++WUNGjRIW7Zs0bhx44IxIwAAQK/8vkXBAw884DvO+vDDD6upqUnz5s3T+++/r2XLlgV8QAAAgEvxe4/MjBkzfB8nJSXpnXfekcvlUkxMDHfCBgAA15Xfe2S6HT16VDt37tS5c+c4YQkAAFjC7z0yp06dUn5+vj788EPZbDb99re/1bhx4/TYY48pJiZGjz76aDDmBAAAuIjfe2SKi4sVHh6u9957T5GRkb7lX/3qV7Vz586ADgcAAHA5fu+R+eCDD7RhwwaNGTOmx/IvfvGLam5uDthgAAAAV+L3Hpn29vYee2K6uVwuRUREBGQoAACAvvA7ZKZMmXLR1Xs9Ho9efvllTZ06NVBzAQAAXJHfh5a+//3va8GCBdq/f786Ozv19NNP629/+5s+/fRTvf7668GYEQAAoFd+h0xKSoq2b9+uzZs3a9iwYWpvb9eXvvQlzZs3T6NHjw7GjAAAAL3yO2QkKTo6Wg888ECgZwEAAPDLVYVMR0eH6urq1NbWdtFt4e+4446ADAYAAHAlfofMjh07VFhYqFOnTl20zmaz6eDBgwEZDAAA4Er8DpknnnhCX/nKV7RkyRLFxsYGYyYAAIA+8fvt162trcrJySFiAACA5fwOmTvvvFMffvhhMGYBAADwi9+Hlh5//HHl5eXpz3/+s1JSUhQe3vMh5s+f3+fH2r17tzZs2KD9+/erpaVF69ev18yZM33rH330Ub3xxhs9viYjI0MbNmzwd2wAANAP+R0yb731lj744ANFRERo165dPdbZbDa/Qqa9vV2pqamaM2eOHnzwwV63mTFjhoqLi32fh/JtEMLPn7R6BCBk8P0A4HrwO2TKysr00EMP6dvf/rbCwvw+MtVDZmamMjMzL7tNRESE4uLirul5JMntdl/zY1xKdHS0IiIGy3F8S9CeAzBRRMRgRUdHB/X7DwNH958jt9vNn6kBoK+vsd8h09nZqa9+9avXHDF9tWvXLk2bNk3Dhw/Xbbfdpvz8fI0YMcLvx9m3b18Qpvs/RUUrdebMmaA+B67s+PHjKi8vV25ursaOHWv1OANeVFSUTpw4oRMnTlg9CvqBxsZGSdLhw4d17tw5i6dBqPA7ZL7xjW/o7bff1v333x+MeXqYMWOGvvSlLykxMVHHjh3TM888o0WLFunnP/+57Ha7X4+Vnp7u99fAPIcOHVJ5ebkyMzOVlpZm9TgAAigyMlLShVvl8P3d/7nd7j7thPA7ZLrvdF1dXa3U1NSLTvZdunSpvw95SbNmzfJ9nJqaqtTUVM2cOdO3l8YfdrudkBkAul9jXm+g/+H7G73xO2Tq6up00003Sbqwe+8f2Wy2wEx1CePGjdOIESN09OhRv0MGAAD0P36HzKZNm4IxR5+cOHFCLpcrICf/AgAA813VTSMD5ezZs76TtySpqalJBw8eVExMjGJiYvTss8/qzjvvVGxsrI4dO6ann35aSUlJmjFjhoVTAwCAUGFpyOzfv7/HdWe6rxcze/ZsrVy5UocPH9a2bdv02WefafTo0frnf/5n5eXlhfS1ZAAAwPVjachMnTpVdXV1l1zPFXwBAMDlXJ+LwQAAAAQBIQMAAIxFyAAAAGMRMgAAwFiEDAAAMBYhAwAAjEXIAAAAYxEyAADAWIQMAAAwFiEDAACMRcgAAABjETIAAMBYhAwAADAWIQMAAIxFyAAAAGMRMgAAwFiEDAAAMFa41QMAQKg7ceKEXC6X1WMMeA0NDT1+hbUcDofGjBlj9RiEDABczokTJ5Q9Z47Od3RYPQr+bvny5VaPAEkRgwercutWy2OGkAGAy3C5XDrf0aHWzEx1xsRYPQ4QEgZ9+qli339fLpeLkAEAE3TGxKgzNtbqMQD8P5zsCwAAjEXIAAAAYxEyAADAWIQMAAAwFiEDAACMRcgAAABjETIAAMBYhAwAADAWIQMAAIxFyAAAAGMRMgAAwFiEDAAAMBYhAwAAjEXIAAAAYxEyAADAWOFWDwAAJgh3uaweAQgZofT9QMgAQB/E7dhh9QgAekHIAEAftNx+u7ocDqvHAEJCuMsVMnFPyABAH3Q5HOqMjbV6DAD/Dyf7AgAAYxEyAADAWIQMAAAwFiEDAACMRcgAAABjETIAAMBYhAwAADAWIQMAAIxFyAAAAGMRMgAAwFiEDAAAMBYhAwAAjEXIAAAAYxEyAADAWOFWDwAAJhj06adWjwCEjFD6fiBkAOAyHA6HIgYPVuz771s9ChBSIgYPlsPhsHoMQgb/p6mpSWfOnLF6jGvS0NDQ41eTRUVFKTEx0eoxBrwxY8aocutWuVwuq0cZ8BoaGrR8+XKtXr1a48ePt3qcAc/hcGjMmDFWj0HI4AKXy6Xs7Gx5PB6rRwmI5cuXWz3CNbPb7dq+fXtI/ItnoBszZkxI/MDGBePHj1daWprVYyBEEDKQdKGsKysrjd8j059ERUURMQBwBYQMfDiMAQAwDW+/BgAAxiJkAACAsQgZAABgLEIGAAAYi5ABAADGImQAAICxCBkAAGAsQgYAABjL0pDZvXu37r//fmVkZCg1NVXvvvtuj/Ver1fr1q1TRkaGbr75Zi1YsEAff/yxNcMCAICQY2nItLe3KzU1VStWrOh1/UsvvaRNmzZp5cqV2rJli4YMGaKFCxeqo6PjOk8KAABCkaW3KMjMzFRmZmav67xerzZu3KgHHnhAM2fOlCStXbtW06dP17vvvqtZs2Zdz1EBAEAICtl7LTU1NamlpUXTp0/3LYuOjtakSZNUW1vrd8i43e5AjwgAuI66f4673W5+pg8AfX2NQzZkWlpaJEmjRo3qsXzUqFFqbW31+/H27dsXkLkAANZobGyUJB0+fFjnzp2zeBqEipANmUBLT0+X3W63egwAwFWKjIyUJKWkpCgtLc3iaRBsbre7TzshQjZk4uLiJEltbW0aPXq0b3lbW9tV/QG22+2EDAAYrPtnOD/P8Y9C9joyiYmJiouLU01NjW/ZmTNn9NFHH8npdFo4GQAACBWW7pE5e/as75indOEE34MHDyomJkbx8fGaP3++fvKTnygpKUmJiYlat26dRo8e7XsXEwAAGNgsDZn9+/dr/vz5vs+Li4slSbNnz9aaNWu0aNEiff7553r88cd1+vRp/dM//ZNefvllDR482KqRAQBACLE0ZKZOnaq6urpLrrfZbMrLy1NeXt51nAoAAJgiZM+RAQAAuBJCBgAAGIuQAQAAxiJkAACAsQgZAABgLEIGAAAYi5ABAADGImQAAICxCBkAAGAsQgYAABiLkAEAAMYiZAAAgLEIGQAAYCxCBgAAGIuQAQAAxiJkAACAsQgZAABgLEIGAAAYi5ABAADGImQAAICxCBkAAGAsQgYAABiLkAEAAMYiZAAAgLEIGQAAYCxCBgAAGIuQAQAAxiJkAACAsQgZAABgrHCrBwAABF9TU5POnDlj9RjXpKGhocevJouKilJiYqLVY/QLhAwA9HMul0vZ2dnyeDxWjxIQy5cvt3qEa2a327V9+3Y5HA6rRzEeIQMA/ZzD4VBlZaXxe2T6k6ioKCImQAgZABgAOIyB/oqTfQEAgLEIGQAAYCxCBgAAGItzZAAAIc/tdqu2tlatra2KjY2V0+mU3W63eiyEAEIGABDSqqqqVFZWpubmZt+y+Ph45efnKysry8LJEAo4tAQACFlVVVUqLCxUcnKyKioqtGPHDlVUVCg5OVmFhYWqqqqyekRYzOb1er1WDxFMbrdbe/bs0eTJk9kNCQAGcbvdmj17tpKTk1VaWqqwsP/7t7fH41FBQYHq6+tVWVnJz/d+qK9/f7NHBgAQkmpra9Xc3Kzc3NweESNJYWFhysnJ0SeffKLa2lqLJkQoIGQAACGptbVVkpScnNzr+u7l3dthYCJkAAAhKTY2VpJ05MiRXtd3L+/eDgMTIQMACElOp1Px8fEqLy+/6IaXHo9HFRUVSkhIkNPptGhChAJCBgAQkux2u/Lz81VdXa2CggLt3btXZ8+e1d69e1VQUKDq6mrl5eVxou8Ax3VkAAAhKysrSyUlJSorK1Nubq5veUJCgkpKSriODAgZAEBoy8rKUmZmJlf2Ra8IGQBAyLPb7ZoyZYrVYyAEcY4MAAAwFiEDAACMRcgAAABjETIAAMBYhAwAADAWIQMAAIxFyAAAAGMRMgAAwFiEDAAAMFa/v7Kv1+uVJLndbosnAQAAfdX993b33+OX0u9DpvvW7/v27bN4EgAA4K/uv8cvxea9UuoYzuPxqKurS2FhYbLZbFaPAwAA+sDr9crj8Sg8PFxhYZc+E6bfhwwAAOi/ONkXAAAYi5ABAADGImQAAICxCBkAAGAsQgYAABiLkAEAAMYiZAAAgLEIGQAAYCxCBv3Gq6++qqysLKWnp+vuu+/W3r17rR4JQADs3r1b999/vzIyMpSamqp3333X6pEQQggZ9Atvv/22iouLtWTJEr3xxhtKS0vTwoUL1dbWZvVoAK5Re3u7UlNTtWLFCqtHQQjiFgXoF+6++26lp6fr8ccfl3ThHluZmZm699579e1vf9vi6QAESmpqqtavX6+ZM2daPQpCBHtkYLzz58/rwIEDmj59um9ZWFiYpk+frtraWgsnAwAEGyED4506dUput1ujRo3qsXzUqFFqbW21aCoAwPVAyAAAAGMRMjDeiBEjZLfbLzqxt62tTbGxsRZNBQC4HggZGC8iIkITJkxQTU2Nb5nH41FNTY2cTqeFkwEAgi3c6gGAQMjJyVFhYaEmTpyom2++Wa+88oo+//xzZWdnWz0agGt09uxZNTY2+j5vamrSwYMHFRMTo/j4eAsnQyjg7dfoNzZv3qwNGzaopaVFN910k/7jP/5DkyZNsnosANfoww8/1Pz58y9aPnv2bK1Zs8aCiRBKCBkAAGAszpEBAADGImQAAICxCBkAAGAsQgYAABiLkAEAAMYiZAAAgLEIGQAAYCxCBgAAGIuQAQAAxuJeSwCui5aWFj3//PN677339N///d8aNWqUbrrpJt13332aNm2a1eMBMBS3KAAQdE1NTfrmN7+p4cOH6+GHH1ZKSoq6urpUXV2tn//853rnnXesHrFX58+fV0REhNVjALgMDi0BCLqioiLZbDb94he/0J133qnx48frxhtvVE5OjrZs2SJJqqio0L/+679q8uTJyszM1MqVK3X27FnfY1RWVmrKlCnauXOn7rrrLjmdTi1cuFAnT57s8Vy//OUvNWvWLE2cOFEZGRlatWqVb93p06e1bNky3Xbbbbrllls0f/58HTp0yLf+xz/+sb7+9a/rF7/4hbKysnTzzTcH+f8MgGtFyAAIKpfLpZ07d2revHkaOnToReuHDx8uSbLZbFq2bJneeustrVmzRn/605/09NNP99j23LlzKi8v19q1a7V582YdP35cJSUlvvWvvfaaVq1apXvuuUdvvvmmnnvuOX3hC1/wrc/Ly1NbW5teeuklVVZWasKECbrvvvvkcrl82zQ2Nmr79u169tlntW3btsD+zwAQcJwjAyCoGhsb5fV6dcMNN1x2uwULFvg+TkxMVH5+vlasWKGVK1f6lnd2dqqoqMgXJ/PmzdNzzz3nW/+Tn/xEOTk5uu+++3zLuveq/Od//qf27t2rmpoa3+GiwsJCvfvuu9q+fbvmzp3re461a9dq5MiR1/T7BnB9EDIAgqqvp+H98Y9/1AsvvKD6+nqdOXNGbrdbHR0d+vzzzzVkyBBJ0pAhQ3rsYRk9erTa2tokSW1tbTp58uQlTxyuq6tTe3u7pk6d2mP5uXPn1NjY6Ps8Pj6eiAEMQsgACKqkpCTZbDbV19dfcpumpib9+7//u775zW/qO9/5jmJiYvTnP/9Zy5YtU2dnpy9kwsN7/siy2Wy+UBo8ePBl5zh79qzi4uK0adOmi9ZFR0f7Pu5+LgBm4BwZAEHlcDiUkZGhV199Ve3t7RetP336tA4cOCCv16tHH31UkydP1vjx4y86ifdKoqKilJCQoJqaml7XT5gwQa2trbLb7UpKSurxH3tgAHMRMgCCbsWKFfJ4PLr77ru1fft2ffzxxzpy5Ig2btyouXPnKikpSZ2dndq0aZOOHTumbdu26Wc/+5nfz/PQQw+poqJCGzdu1Mcff6wDBw749sBMnz5dkydP1pIlS1RdXa2mpib913/9l374wx9q3759gf4tA7hOOLQEIOjGjRunyspKPf/88yopKdHJkyc1cuRITZgwQStXrlRaWpqWLl2ql156Sc8884ymTJmi7373uyosLPTreWbPnq2Ojg799Kc/1dq1a+VwOPSVr3xF0oXDUC+++KLKysq0dOlSnTp1SrGxsZoyZYpiY2OD8dsGcB1wQTwAAGAsDi0BAABjETIAAMBYhAwAADAWIQMAAIxFyAAAAGMRMgAAwFiEDAAAMBYhAwAAjEXIAAAAYxEyAADAWIQMAAAw1v8CVm6gz+JI7BYAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjIAAAGwCAYAAACzXI8XAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAANJZJREFUeJzt3Xtc1HW+x/H3MApoIKjgQ0HXbFJsk3KMtjSKXbrZ5XRWe2T18GiKp7a0lJY6qK2Zl1Isi7b7RTmpZRcjz2amXTipFJvWwcCOYYlJiKSQpEIC/mbOHy1zmoWUUcbf/GZez8ejR8z3+/M3nxpm5u339/19vza32+0WAACABYWZXQAAAMCJIsgAAADLIsgAAADLIsgAAADLIsgAAADLIsgAAADLIsgAAADL6mR2Af7mcrl09OhRhYWFyWazmV0OAABoB7fbLZfLpU6dOiks7NfHXYI+yBw9elSlpaVmlwEAAE5AcnKywsPDf7U/6INMS4pLTk6W3W43uRoAANAehmGotLT0mKMxUggEmZbLSXa7nSADAIDFHG9aCJN9AQCAZRFkAACAZQVMkHn++eeVlJSkBx980NPW2NioOXPm6IILLpDT6dRdd92lmpoaE6sEAACBJCCCTElJiV599VUlJSV5tT/00EP67//+b+Xm5mr58uXat2+f7rzzTpOqBAAAgcb0IFNfX697771X8+fPV0xMjKf90KFDevPNNzV9+nQNHz5cQ4YM0UMPPaTi4mJt3brVvIIBAEDAMP2upblz5yotLU0jRozQM88842nftm2bmpubNWLECE+bw+FQQkKCtm7dqqFDh/r0PIZhdFTJAADAz9r7vW1qkHnnnXf0v//7v1q1alWrvpqaGnXu3FndunXzau/Zs6f279/v83OxKB4AAMHHtCCzd+9ePfjgg1q6dKkiIiL8/nwsiAcAgHW0LIh3PKYFmS+//FK1tbUaPXq0p80wDG3ZskUvv/yylixZoubmZh08eNBrVKa2tlbx8fE+Px8L4gEAEHxMCzIXXnih3n77ba+2GTNm6IwzztCtt96qPn36qHPnzioqKtKVV14pSSovL1dVVZXP82MQGgzDUHFxsWpqahQXFyen00l4BYAgZ1qQiYqK0qBBg7zaunbtqtjYWE/79ddfr4ULFyomJkZRUVGaP3++nE4nQQatFBQUKDc3V1VVVZ62hIQEZWZmKj093cTKAAD+ZPrt18cyc+ZM/f73v9fUqVP1b//2b4qLi9MTTzxhdlkIMAUFBcrOzpbD4VBeXp42btyovLw8ORwOZWdnq6CgwOwSAQB+YnO73W6zi/AnwzA8t2tzmSH4GIahUaNGyeFwaPHixV67pLpcLmVlZam8vFz5+fm8/gBgIe39/g7oERngeIqLi1VVVaWMjIxWW72HhYVp4sSJ2rNnj4qLi02qEADgTwQZWFrL3lsOh6PN/pZ29ugCgOBEkIGlxcXFSZJ27tzZZn9Le8txAIDgQpCBpTmdTiUkJGjp0qVyuVxefS6XS3l5eUpMTJTT6TSpQgCAPxFkYGl2u12ZmZkqLCxUVlaWSkpKVF9fr5KSEmVlZamwsFDTpk1joi8ABCnTN40ETlZ6erpycnKUm5urjIwMT3tiYqJycnJYRwYAghhBBkEhPT1daWlprOwLACGGIIOgYbfblZKSYnYZAIBTiDkyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsjqZ+eSvvPKKVq5cqT179kiSBg4cqMmTJystLU2SNG7cOG3evNnrz9x4442aO3fuKa8VAAAEHlODTO/evXXPPfeof//+crvdWr16taZMmaK33npLAwcOlCSNGTNGU6dO9fyZLl26mFUuAAAIMKYGmfT0dK/Hd999t1auXKmtW7d6gkxkZKTi4+PNKA8AAAQ4U4PMLxmGoXXr1qmhoUFOp9PT/vbbb+tvf/ub4uPj9Yc//EGTJ08+oVEZwzA6slwAAOBH7f3eNj3IlJWV6aabblJjY6O6du2qp556SmeeeaYk6dprr1VCQoJ69eqlsrIyPfLII9q1a5eefPJJn5+ntLS0o0sHAAAms7ndbreZBTQ1NWnv3r06dOiQ1q9frzfeeEMrVqzwhJlfKioq0oQJE/T+++/rN7/5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U3h4uNeeSna7XevWrVOPHj3kdDpNrBJm8znILF++3B91AADQSsvqvc3NzV7tLY9b+hG6mCEFAAhIn3/+uWfTyH9eOb5ljszhw4f1+eefn/LaEDh8HpEZN27cMS8hLVu27KQKAgBA+nmCryQlJyfr+eef1xdffKGamhrFxcXp3HPP1W233abS0lJt2bJFv/vd70yuFmbxOcicddZZXo+PHj2q7du36+uvv9Yf//jHjqoLABDiqqurJf082bdz585e+ytJ0hVXXKHS0lLPcQhNPgeZmTNnttn+xBNPqKGh4aQLAgBAknr37i1JWrdunW644Qav9WJcLpfee+89r+MQmjpsjsx1112nN998s6NOBwAIceeff74kqbS0VFlZWSopKVF9fb1KSkqUlZWl0tJSr+MQmnwekfk1xcXFrSZjAQBwos477zx1795dBw4c0ObNm7Vp0yZPX8tk3x49eui8884zq0QEAJ+DzJ133un12O12a//+/dq2bZsmT57cYYUBAEKb3W7XjBkzlJ2d7bXPUgubzabp06fLbrebUB0Chc9BJioqyuuuJZvNpgEDBmjq1KlKTU3t0OIAAKEtPT1dOTk5euyxx7R3715Pe8+ePZWZman09HQTq0Mg8DnILFy40B91AADQpvT0dKWlpam4uNhz+7XT6WQkBpJOYLLvpZdeqgMHDrRqP3jwoC699NIOKQoAgF+y2+1KSUnRyJEjlZKSQoiBh89BZs+ePXK5XK3am5qa9P3333dIUQAAAO3R7ktLH374oefnTZs2KTo62vPY5XKpqKhIiYmJHVsdAADAMbQ7yEyZMkXS/88S9zpJp05KTExs1Q4AAOBP7Q4yX331laSfJ12tWrVKPXr08FtRAAAA7eHzXUsffvjhr24a+dNPP6lLly4nXRQAAEB7+DzZd8KECW1O6v3iiy/YNBIAAJxSPgeZiIgIXXfddVq7dq2knyf6PvHEExo7dqwuueSSDi8QAADg1/h8aen555/Xyy+/rJkzZ+rDDz/Unj17tGfPHj377LOs7AsAAE6pE9o0cuzYsaqurtYLL7ygTp06admyZRo2bFhH1wYAAHBMPgeZH3/8UX/5y19UVFSkuXPnavPmzZo0aZLuuecejR071h81AgBOUmVlpQ4fPmx2GfiHqKgo9e3b1+wygoLPQebaa69V37599dZbb6lfv34aM2aM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2TAMXnN0iPj4eL3x+uuqq6szu5SQ9+2332r27NmaM2eOTj/9dLPLCXmxsbGKj4/322dte88b0EHm4osv1uWXX66+ffvqu+++06OPPqpbb71Vr732mux2u0/nKi0t9VOVCCQVFRWSpB07dujIkSMmVwOgIzU1NXn+zfvbfNXV1aqurja7jMAOMtdcc43n55bJvpdddplnlMYXycnJPocfWE9kZKQkadCgQRo8eLDJ1QDoSLy/Q4thGO0ahAjoIPPP+vXrp+7du2v37t0+Bxm73U6QCQEtrzGvNxB8eH+jLZZaR6a6ulp1dXVM/gUAAJJMHpGpr6/3zGmQpMrKSm3fvl0xMTGKiYnRk08+qSuvvFJxcXH67rvv9PDDD6t///66+OKLTawaAAAEClODzLZt2zR+/HjP45b1YkaNGqUHHnhAO3bs0OrVq3Xo0CH16tVLF110kaZNm8ZaMgAAQJLJQeaCCy5QWVnZr/YvWbLkFFYDAACsxlKTfeFflZWVOnz4sNllnJRdu3Z5/dvKoqKi1LdvX7PLAICARpCBJKmurk6jR4+Wy+Uyu5QOMWvWLLNLOGl2u13r168PiJUzASBQEWQg6ecVGvPz8y0/IhNMoqKiCDEAcBwEGXhwGQMAYDWWWkcGAADglwgyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsjqZXQDQUQzDUHFxsWpqahQXFyen0ym73W52WQAAPyLIICgUFBQoNzdXVVVVnraEhARlZmYqPT3dxMoAAP7EpSVYXkFBgbKzs+VwOJSXl6eNGzcqLy9PDodD2dnZKigoMLtEAICfEGRgaYZhKDc3V6mpqVq8eLGSk5PVtWtXJScna/HixUpNTdXjjz8uwzDMLhUA4AcEGVhacXGxqqqqlJGRobAw71/nsLAwTZw4UXv27FFxcbFJFQIA/IkgA0urqamRJDkcjjb7W9pbjgMABBeCDCwtLi5OkrRz5842+1vaW44DAAQXggwszel0KiEhQUuXLpXL5fLqc7lcysvLU2JiopxOp0kVAgD8iSADS7Pb7crMzFRhYaGysrJUUlKi+vp6lZSUKCsrS4WFhZo2bRrr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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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Ki4ulsPhcDk2aNCgOikMAADAKB4HpD179shisejkyZPVwpGXl5cOHDhQZ8UBAAAYweOAtHDhQvXt21crV650bhYJAADQlHgckI4dO6bU1FR17969PuoBAAAwnMeLtMPCwnTs2LH6qAUAAKBB8HgGacKECUpKSlJRUZF69uypFi1chwgJCamz4nCN+epZo0sAGgzeDwBuh5u6F5skzZs3z9nm5eUlh8PBIu160un0RqNLAFAPTp8+rdLSUqPLaPaOHj3q8l8Yy9fXV3fccYfRZXgekD755JP6qAM3UHLHWNladTW6DKBBMF892yT+p+H06dOKHjNG5VevGl0K/n/z5883ugRI8m7VSpmbNxsekjwOSIGBgfVRB27A1qqrKlvz9w40JaWlpSq/elVFw4apwsfH6HKABqHlDz/I//PPVVpa2vgCUpVvv/1WJ0+eVEVFhUv7v//7v99yUQDQXFT4+KjC39/oMgC48Tggff/995oxY4YOHTrkXHskybkfEmuQAABAY+fxZf5Lly5VUFCQ/vGPf6h169b6+OOPtX79evXt21fr1q2rjxoBAABuK48DktVq1axZs9S5c2eZTCZ5eXlp4MCBev7557VkyZL6qBEAAOC28jgg2e12tWvXTpLUqVMnnT17bU+SwMBALpEEAABNgsdrkO677z4dPHhQd911l/r166e0tDS1bNlSGzdu1F133VUfNQIAANxWHs8gPfvss7Lb7ZKkWbNmqaCgQOPGjdPnn3+ul19+uc4LBAAAuN08nkEaOnSo8+vu3btr27ZtKi0tlY+Pj/NKNgAAgMbM4xmkKseOHdPOnTt15coV+fr61mFJAAAAxvJ4BqmkpERz5szRrl275OXlpb/97W+66667NG/ePPn4+OjFF1+sjzoBAABuG49nkBITE9WiRQt99tlnat26tbN95MiR2rlzZ50WBwAAYASPZ5D++7//W6tXr652j5R/+7d/08mTJ+usMAAAAKN4PIN0+fJll5mjKqWlpfL29q6TogAAAIzkcUAaOHCgtm7d6tJmt9uVlpamhx56qK7qAgAAMIzHp9h+85vfaPLkydq3b58qKir0xhtv6Ntvv9UPP/ygP/zhD/VRIwAAwG3lcUDq2bOntm/frvXr16tdu3a6fPmyHn30UY0bN05du3atjxoBAABuK48DkiR16NBBzz77bF3XAgAA0CDc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zZtr7B8WFqb4+HhFRUXJ29v7psa8cOGCNm/erBdffFGDBw9W37599dprr8lqtWrPnj319VQBAEAjYtgapPLycu3fv1/Tpk1ztplMJkVERNz07qW1GXPfvn2qqKhQRESEs09wcLACAgKcW497wmaz3VStAADg9qvt57ZhAamkpEQ2m01+fn4u7X5+fsrPz6+3MYuKitSyZUt17NixWp/CwkKPH3Pv3r03VSsAAGi4uIrtFoWGhrKoDwCARsJms9VqcsOwgNSpUyeZzeZqC7KLi4tvenv32ozp7++viooKnT9/3mUWqbi4+LoLv2/EbDYTkAAAaGIMW6Tt7e2tPn36KDc319lmt9uVm5t709u712bMvn37qmXLli598vPzdfLkSY/XHwEAgKbJ0FNssbGxio+PV9++fRUWFqaMjAyVlZUpOjpakjR37lx169ZNFotF0rVF2FU3ESwvL9eZM2d04MABtW3bVt27d6/VmB06dNCYMWO0bNky+fj4qH379lqyZInCw8MJSAAAQJLBAWnkyJE6d+6cUlNTVVhYqN69eystLc15OuzUqVMymf45yXX27FmNGjXK+f2aNWu0Zs0aPfjgg1q3bl2txpSkefPmyWQyadasWSovL9eQIUO0cOHC2/OkAQBAg+flcDgcRhfRGFVWVurrr79mkTYAAI1I1SLtfv36qUWL688TcRXbTbLb7ZK4zB8AgMao6nP8ephBukl2u12VlZUymUzy8vIyuhwAAFALDodDdrtdLVq0cFnG446ABAAA4MbQe7EBAAA0RAQkAAAANwQkAAAANwQkAAAANwQkAAAANwQkAAAANwQkAAAANwQkAAAANwQk4Eds2LBBkZGRCg0NVUxMjPLy8owuCUAd+L//9//qV7/6lYYMGaJevXrp73//u9EloQEhIAE3kJWVpcTERM2YMUNbtmxRSEiIpkyZouLiYqNLA3CLLl++rF69emnhwoVGl4IGiFuNADcQExOj0NBQLViwQNK1e/ANGzZMEyZM0NSpUw2uDkBd6dWrl37/+99r+PDhRpeCBoIZJOA6ysvLtX//fkVERDjbTCaTIiIiZLVaDawMAFDfCEjAdZSUlMhms8nPz8+l3c/PT0VFRQZVBQC4HQhIAAAAbghIwHV06tRJZrO52oLs4uJi+fv7G1QVAOB2ICAB1+Ht7a0+ffooNzfX2Wa325Wbm6vw8HADKwMA1LcWRhcANGSxsbGKj49X3759FRYWpoyMDJWVlSk6Otro0gDcokuXLun48ePO7wsKCnTgwAH5+PgoICDAwMrQEHCZP/Aj1q9fr9WrV6uwsFC9e/fWK6+8on79+hldFoBbtGvXLk2cOLFa++jRo7Vs2TIDKkJDQkACAABwwxokAAAANwQkAAAANwQkAAAANwQkAAAANwQkAAAANwQkAAAANwQkAAAANwQkAAAANwQkAAAAN9yLDUCjVlhYqHfffVefffaZzpw5Iz8/P/Xu3VuTJk3S4MGDjS4PQCPFrUYANFoFBQX6z//8T3Xs2FGzZs1Sz549VVlZqZycHP3xj3/Utm3bjC6xRuXl5fL29ja6DAA3wCk2AI1WQkKCvLy89Kc//Uk/+9nP1KNHD913332KjY3Vxo0bJUnp6el64okn1L9/fw0bNkyvvvqqLl265BwjMzNTAwcO1M6dO/Uf//EfCg8P15QpU3T27FmXx9q0aZOioqLUt29fDRkyRIsWLXIeO3/+vF5++WX95Cc/0YABAzRx4kR98803zuO/+93v9POf/1x/+tOfFBkZqbCwsHr+mwFwqwhIABql0tJS7dy5U+PGjVPbtm2rHe/YsaMkycvLSy+//LL++te/atmyZfriiy/0xhtvuPS9cuWK1qxZo9dff13r16/XqVOnlJSU5Dz+wQcfaNGiRRo7dqw++ugjvf3227r77rudx2fPnq3i4mKtWrVKmZmZ6tOnjyZNmqTS0lJnn+PHj2v79u166623tHXr1rr9ywBQ51iDBKBROn78uBwOh+65554b9ps8ebLz66CgIM2ZM0cLFy7Uq6++6myvqKhQQkKCM/SMGzdOb7/9tvP4O++8o9jYWE2aNMnZVjULtHv3buXl5Sk3N9d52iw+Pl5///vftX37dj311FPOx3j99dfVuXPnW3reAG4PAhKARqm2yyf/8Y9/6L333lN+fr4uXrwom82mq1evqqysTG3atJEktWnTxmVGqGvXriouLpYkFRcX6+zZs9dd8H3w4EFdvnxZDz30kEv7lStXdPz4cef3AQEBhCOgESEgAWiUunfvLi8vL+Xn51+3T0FBgaZNm6b//M//1K9//Wv5+Pjoq6++0ssvv6yKigpnQGrRwvVXoZeXlzOAtWrV6oZ1XLp0SV26dNG6deuqHevQoYPz66rHAtA4sAYJQKPk6+urIUOGaMOGDbp8+XK14+fPn9f+/fvlcDj04osvqn///urRo0e1xdc/pn379goMDFRubm6Nx/v06aOioiKZzWZ1797d5Q8zRkDjRUAC0GgtXLhQdrtdMTEx2r59u7777jsdOXJEa9eu1VNPPaXu3buroqJC69at0/fff6+tW7fqww8/9PhxZs6cqfT0dK1du1bfffed9u/f75wxioiIUP/+/TVjxgzl5OSooKBA/+///T+9+eab2rt3b10/ZQC3CafYADRad911lzIzM/Xuu+8qKSlJZ8+eVefOndWnTx+9+uqrCgkJ0UsvvaRVq1bpt7/9rQYOHKjnn39e8fHxHj3O6NGjdfXqVb3//vt6/fXX5evrqxEjRki6djpu5cqVSklJ0UsvvaSSkhL5+/tr4MCB8vf3r4+nDeA2YKNIAAAAN5xiAwAAcENAAgAAcENAAgAAcENAAgAAcENAAgAAcENAAgAAcENAAgAAcENAAgAAcENAAgAAcENAAgAAcENAAgAAcPP/Afqsm5AdzAySAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f,(ax1, ax2) = plt.subplots(1, 2, sharey=True,figsize=(12,6))\n",
        "ax1.scatter(df['mean area'],df['Cancer'])\n",
        "ax1.set_title(\"Cancer cases as a function of mean area\", fontsize=15)\n",
        "ax2.scatter(df['mean smoothness'],df['Cancer'])\n",
        "ax2.set_title(\"Cancer cases as a function of mean smoothness\", fontsize=15)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 535
        },
        "id": "3jIV9VTEv34o",
        "outputId": "c9ec06c9-d70a-4321-88d0-c19d437663fe"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Cancer cases as a function of mean smoothness')"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_feat = df.drop('Cancer',axis=1) # Define a dataframe with only features\n",
        "df_feat.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "id": "611Yq0DUv6V6",
        "outputId": "57253a9d-523b-462a-c7fa-fd136d94f1e7"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
              "0        17.99         10.38          122.80     1001.0          0.11840   \n",
              "1        20.57         17.77          132.90     1326.0          0.08474   \n",
              "2        19.69         21.25          130.00     1203.0          0.10960   \n",
              "3        11.42         20.38           77.58      386.1          0.14250   \n",
              "4        20.29         14.34          135.10     1297.0          0.10030   \n",
              "\n",
              "   mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
              "0           0.27760          0.3001              0.14710         0.2419   \n",
              "1           0.07864          0.0869              0.07017         0.1812   \n",
              "2           0.15990          0.1974              0.12790         0.2069   \n",
              "3           0.28390          0.2414              0.10520         0.2597   \n",
              "4           0.13280          0.1980              0.10430         0.1809   \n",
              "\n",
              "   mean fractal dimension  ...  worst radius  worst texture  worst perimeter  \\\n",
              "0                 0.07871  ...         25.38          17.33           184.60   \n",
              "1                 0.05667  ...         24.99          23.41           158.80   \n",
              "2                 0.05999  ...         23.57          25.53           152.50   \n",
              "3                 0.09744  ...         14.91          26.50            98.87   \n",
              "4                 0.05883  ...         22.54          16.67           152.20   \n",
              "\n",
              "   worst area  worst smoothness  worst compactness  worst concavity  \\\n",
              "0      2019.0            0.1622             0.6656           0.7119   \n",
              "1      1956.0            0.1238             0.1866           0.2416   \n",
              "2      1709.0            0.1444             0.4245           0.4504   \n",
              "3       567.7            0.2098             0.8663           0.6869   \n",
              "4      1575.0            0.1374             0.2050           0.4000   \n",
              "\n",
              "   worst concave points  worst symmetry  worst fractal dimension  \n",
              "0                0.2654          0.4601                  0.11890  \n",
              "1                0.1860          0.2750                  0.08902  \n",
              "2                0.2430          0.3613                  0.08758  \n",
              "3                0.2575          0.6638                  0.17300  \n",
              "4                0.1625          0.2364                  0.07678  \n",
              "\n",
              "[5 rows x 30 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b25702fa-f8fd-433f-a4c9-c6576d56ce83\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean radius</th>\n",
              "      <th>mean texture</th>\n",
              "      <th>mean perimeter</th>\n",
              "      <th>mean area</th>\n",
              "      <th>mean smoothness</th>\n",
              "      <th>mean compactness</th>\n",
              "      <th>mean concavity</th>\n",
              "      <th>mean concave points</th>\n",
              "      <th>mean symmetry</th>\n",
              "      <th>mean fractal dimension</th>\n",
              "      <th>...</th>\n",
              "      <th>worst radius</th>\n",
              "      <th>worst texture</th>\n",
              "      <th>worst perimeter</th>\n",
              "      <th>worst area</th>\n",
              "      <th>worst smoothness</th>\n",
              "      <th>worst compactness</th>\n",
              "      <th>worst concavity</th>\n",
              "      <th>worst concave points</th>\n",
              "      <th>worst symmetry</th>\n",
              "      <th>worst fractal dimension</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17.99</td>\n",
              "      <td>10.38</td>\n",
              "      <td>122.80</td>\n",
              "      <td>1001.0</td>\n",
              "      <td>0.11840</td>\n",
              "      <td>0.27760</td>\n",
              "      <td>0.3001</td>\n",
              "      <td>0.14710</td>\n",
              "      <td>0.2419</td>\n",
              "      <td>0.07871</td>\n",
              "      <td>...</td>\n",
              "      <td>25.38</td>\n",
              "      <td>17.33</td>\n",
              "      <td>184.60</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.1622</td>\n",
              "      <td>0.6656</td>\n",
              "      <td>0.7119</td>\n",
              "      <td>0.2654</td>\n",
              "      <td>0.4601</td>\n",
              "      <td>0.11890</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>20.57</td>\n",
              "      <td>17.77</td>\n",
              "      <td>132.90</td>\n",
              "      <td>1326.0</td>\n",
              "      <td>0.08474</td>\n",
              "      <td>0.07864</td>\n",
              "      <td>0.0869</td>\n",
              "      <td>0.07017</td>\n",
              "      <td>0.1812</td>\n",
              "      <td>0.05667</td>\n",
              "      <td>...</td>\n",
              "      <td>24.99</td>\n",
              "      <td>23.41</td>\n",
              "      <td>158.80</td>\n",
              "      <td>1956.0</td>\n",
              "      <td>0.1238</td>\n",
              "      <td>0.1866</td>\n",
              "      <td>0.2416</td>\n",
              "      <td>0.1860</td>\n",
              "      <td>0.2750</td>\n",
              "      <td>0.08902</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>19.69</td>\n",
              "      <td>21.25</td>\n",
              "      <td>130.00</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>0.10960</td>\n",
              "      <td>0.15990</td>\n",
              "      <td>0.1974</td>\n",
              "      <td>0.12790</td>\n",
              "      <td>0.2069</td>\n",
              "      <td>0.05999</td>\n",
              "      <td>...</td>\n",
              "      <td>23.57</td>\n",
              "      <td>25.53</td>\n",
              "      <td>152.50</td>\n",
              "      <td>1709.0</td>\n",
              "      <td>0.1444</td>\n",
              "      <td>0.4245</td>\n",
              "      <td>0.4504</td>\n",
              "      <td>0.2430</td>\n",
              "      <td>0.3613</td>\n",
              "      <td>0.08758</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.42</td>\n",
              "      <td>20.38</td>\n",
              "      <td>77.58</td>\n",
              "      <td>386.1</td>\n",
              "      <td>0.14250</td>\n",
              "      <td>0.28390</td>\n",
              "      <td>0.2414</td>\n",
              "      <td>0.10520</td>\n",
              "      <td>0.2597</td>\n",
              "      <td>0.09744</td>\n",
              "      <td>...</td>\n",
              "      <td>14.91</td>\n",
              "      <td>26.50</td>\n",
              "      <td>98.87</td>\n",
              "      <td>567.7</td>\n",
              "      <td>0.2098</td>\n",
              "      <td>0.8663</td>\n",
              "      <td>0.6869</td>\n",
              "      <td>0.2575</td>\n",
              "      <td>0.6638</td>\n",
              "      <td>0.17300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20.29</td>\n",
              "      <td>14.34</td>\n",
              "      <td>135.10</td>\n",
              "      <td>1297.0</td>\n",
              "      <td>0.10030</td>\n",
              "      <td>0.13280</td>\n",
              "      <td>0.1980</td>\n",
              "      <td>0.10430</td>\n",
              "      <td>0.1809</td>\n",
              "      <td>0.05883</td>\n",
              "      <td>...</td>\n",
              "      <td>22.54</td>\n",
              "      <td>16.67</td>\n",
              "      <td>152.20</td>\n",
              "      <td>1575.0</td>\n",
              "      <td>0.1374</td>\n",
              "      <td>0.2050</td>\n",
              "      <td>0.4000</td>\n",
              "      <td>0.1625</td>\n",
              "      <td>0.2364</td>\n",
              "      <td>0.07678</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 30 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b25702fa-f8fd-433f-a4c9-c6576d56ce83')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b25702fa-f8fd-433f-a4c9-c6576d56ce83 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b25702fa-f8fd-433f-a4c9-c6576d56ce83');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f9d61a74-ce76-4f76-a7ae-6f5d8dba91d3\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f9d61a74-ce76-4f76-a7ae-6f5d8dba91d3')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f9d61a74-ce76-4f76-a7ae-6f5d8dba91d3 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_feat"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Training and prediction**\n",
        "\n",
        "Train Test Split"
      ],
      "metadata": {
        "id": "jFFrqy-HxDYV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_feat = df.drop('Cancer',axis=1) # Define a dataframe with only features\n",
        "df_feat.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "id": "eeDMsF-HxGT1",
        "outputId": "27e917ab-c8d8-4028-d9d9-5240d4d1ca82"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
              "0        17.99         10.38          122.80     1001.0          0.11840   \n",
              "1        20.57         17.77          132.90     1326.0          0.08474   \n",
              "2        19.69         21.25          130.00     1203.0          0.10960   \n",
              "3        11.42         20.38           77.58      386.1          0.14250   \n",
              "4        20.29         14.34          135.10     1297.0          0.10030   \n",
              "\n",
              "   mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
              "0           0.27760          0.3001              0.14710         0.2419   \n",
              "1           0.07864          0.0869              0.07017         0.1812   \n",
              "2           0.15990          0.1974              0.12790         0.2069   \n",
              "3           0.28390          0.2414              0.10520         0.2597   \n",
              "4           0.13280          0.1980              0.10430         0.1809   \n",
              "\n",
              "   mean fractal dimension  ...  worst radius  worst texture  worst perimeter  \\\n",
              "0                 0.07871  ...         25.38          17.33           184.60   \n",
              "1                 0.05667  ...         24.99          23.41           158.80   \n",
              "2                 0.05999  ...         23.57          25.53           152.50   \n",
              "3                 0.09744  ...         14.91          26.50            98.87   \n",
              "4                 0.05883  ...         22.54          16.67           152.20   \n",
              "\n",
              "   worst area  worst smoothness  worst compactness  worst concavity  \\\n",
              "0      2019.0            0.1622             0.6656           0.7119   \n",
              "1      1956.0            0.1238             0.1866           0.2416   \n",
              "2      1709.0            0.1444             0.4245           0.4504   \n",
              "3       567.7            0.2098             0.8663           0.6869   \n",
              "4      1575.0            0.1374             0.2050           0.4000   \n",
              "\n",
              "   worst concave points  worst symmetry  worst fractal dimension  \n",
              "0                0.2654          0.4601                  0.11890  \n",
              "1                0.1860          0.2750                  0.08902  \n",
              "2                0.2430          0.3613                  0.08758  \n",
              "3                0.2575          0.6638                  0.17300  \n",
              "4                0.1625          0.2364                  0.07678  \n",
              "\n",
              "[5 rows x 30 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-445fa3ca-f918-4268-86ac-48e6ab55916d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean radius</th>\n",
              "      <th>mean texture</th>\n",
              "      <th>mean perimeter</th>\n",
              "      <th>mean area</th>\n",
              "      <th>mean smoothness</th>\n",
              "      <th>mean compactness</th>\n",
              "      <th>mean concavity</th>\n",
              "      <th>mean concave points</th>\n",
              "      <th>mean symmetry</th>\n",
              "      <th>mean fractal dimension</th>\n",
              "      <th>...</th>\n",
              "      <th>worst radius</th>\n",
              "      <th>worst texture</th>\n",
              "      <th>worst perimeter</th>\n",
              "      <th>worst area</th>\n",
              "      <th>worst smoothness</th>\n",
              "      <th>worst compactness</th>\n",
              "      <th>worst concavity</th>\n",
              "      <th>worst concave points</th>\n",
              "      <th>worst symmetry</th>\n",
              "      <th>worst fractal dimension</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17.99</td>\n",
              "      <td>10.38</td>\n",
              "      <td>122.80</td>\n",
              "      <td>1001.0</td>\n",
              "      <td>0.11840</td>\n",
              "      <td>0.27760</td>\n",
              "      <td>0.3001</td>\n",
              "      <td>0.14710</td>\n",
              "      <td>0.2419</td>\n",
              "      <td>0.07871</td>\n",
              "      <td>...</td>\n",
              "      <td>25.38</td>\n",
              "      <td>17.33</td>\n",
              "      <td>184.60</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.1622</td>\n",
              "      <td>0.6656</td>\n",
              "      <td>0.7119</td>\n",
              "      <td>0.2654</td>\n",
              "      <td>0.4601</td>\n",
              "      <td>0.11890</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>20.57</td>\n",
              "      <td>17.77</td>\n",
              "      <td>132.90</td>\n",
              "      <td>1326.0</td>\n",
              "      <td>0.08474</td>\n",
              "      <td>0.07864</td>\n",
              "      <td>0.0869</td>\n",
              "      <td>0.07017</td>\n",
              "      <td>0.1812</td>\n",
              "      <td>0.05667</td>\n",
              "      <td>...</td>\n",
              "      <td>24.99</td>\n",
              "      <td>23.41</td>\n",
              "      <td>158.80</td>\n",
              "      <td>1956.0</td>\n",
              "      <td>0.1238</td>\n",
              "      <td>0.1866</td>\n",
              "      <td>0.2416</td>\n",
              "      <td>0.1860</td>\n",
              "      <td>0.2750</td>\n",
              "      <td>0.08902</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>19.69</td>\n",
              "      <td>21.25</td>\n",
              "      <td>130.00</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>0.10960</td>\n",
              "      <td>0.15990</td>\n",
              "      <td>0.1974</td>\n",
              "      <td>0.12790</td>\n",
              "      <td>0.2069</td>\n",
              "      <td>0.05999</td>\n",
              "      <td>...</td>\n",
              "      <td>23.57</td>\n",
              "      <td>25.53</td>\n",
              "      <td>152.50</td>\n",
              "      <td>1709.0</td>\n",
              "      <td>0.1444</td>\n",
              "      <td>0.4245</td>\n",
              "      <td>0.4504</td>\n",
              "      <td>0.2430</td>\n",
              "      <td>0.3613</td>\n",
              "      <td>0.08758</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.42</td>\n",
              "      <td>20.38</td>\n",
              "      <td>77.58</td>\n",
              "      <td>386.1</td>\n",
              "      <td>0.14250</td>\n",
              "      <td>0.28390</td>\n",
              "      <td>0.2414</td>\n",
              "      <td>0.10520</td>\n",
              "      <td>0.2597</td>\n",
              "      <td>0.09744</td>\n",
              "      <td>...</td>\n",
              "      <td>14.91</td>\n",
              "      <td>26.50</td>\n",
              "      <td>98.87</td>\n",
              "      <td>567.7</td>\n",
              "      <td>0.2098</td>\n",
              "      <td>0.8663</td>\n",
              "      <td>0.6869</td>\n",
              "      <td>0.2575</td>\n",
              "      <td>0.6638</td>\n",
              "      <td>0.17300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20.29</td>\n",
              "      <td>14.34</td>\n",
              "      <td>135.10</td>\n",
              "      <td>1297.0</td>\n",
              "      <td>0.10030</td>\n",
              "      <td>0.13280</td>\n",
              "      <td>0.1980</td>\n",
              "      <td>0.10430</td>\n",
              "      <td>0.1809</td>\n",
              "      <td>0.05883</td>\n",
              "      <td>...</td>\n",
              "      <td>22.54</td>\n",
              "      <td>16.67</td>\n",
              "      <td>152.20</td>\n",
              "      <td>1575.0</td>\n",
              "      <td>0.1374</td>\n",
              "      <td>0.2050</td>\n",
              "      <td>0.4000</td>\n",
              "      <td>0.1625</td>\n",
              "      <td>0.2364</td>\n",
              "      <td>0.07678</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 30 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-445fa3ca-f918-4268-86ac-48e6ab55916d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-445fa3ca-f918-4268-86ac-48e6ab55916d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-445fa3ca-f918-4268-86ac-48e6ab55916d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2d4413fa-6478-4118-a6de-fc961cdf6fcf\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2d4413fa-6478-4118-a6de-fc961cdf6fcf')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2d4413fa-6478-4118-a6de-fc961cdf6fcf button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_feat"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_target = df['Cancer'] # Define a dataframe with only target results i.e. cancer detections\n",
        "df_target.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "Ql9x532F0G99",
        "outputId": "855df7a1-c555-4cc1-9056-b0d7930746c5"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    0\n",
              "1    0\n",
              "2    0\n",
              "3    0\n",
              "4    0\n",
              "Name: Cancer, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Cancer</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "CrrVZV3X0LHw"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(df_feat, df_target, test_size=0.30, random_state=101)\n"
      ],
      "metadata": {
        "id": "ab82r8Zy0OiS"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "HzxeMOZ60ZxT",
        "outputId": "9013e970-a382-482d-9b10-330813601779"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "178    1\n",
              "421    1\n",
              "57     0\n",
              "514    0\n",
              "548    1\n",
              "Name: Cancer, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Cancer</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>421</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>514</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>548</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Train the Support Vector"
      ],
      "metadata": {
        "id": "ZGNTKrnc0eIE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import SVC"
      ],
      "metadata": {
        "id": "b5tGPU8V0dvA"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = SVC()"
      ],
      "metadata": {
        "id": "blYpFmH60pBd"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "cFza7C3z5BC7",
        "outputId": "0f4aa75a-b334-4974-d906-9600875f6a86"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>SVC</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Predictions and Evaluations"
      ],
      "metadata": {
        "id": "dTyS0VsH5Fcx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "predictions = model.predict(X_test)"
      ],
      "metadata": {
        "id": "VhC_62eT5E3-"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report,confusion_matrix"
      ],
      "metadata": {
        "id": "ivJ9Gm9x5MVD"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "We are classifying everything into a single class! This means our model needs to have it parameters adjusted (it may also help to normalize the data)"
      ],
      "metadata": {
        "id": "TiKHTiKz5SHK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test,predictions))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jUykXYc35MPX",
        "outputId": "2a09f5d4-a00f-409e-bb87-c1c469eb09cb"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 56  10]\n",
            " [  3 102]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As expected, the classification report card is bad"
      ],
      "metadata": {
        "id": "ZTReUYLd5dFx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test,predictions))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WDzb7wqJ5f8F",
        "outputId": "f43a8dd4-b456-4664-b9e3-c72b0e7d8abd"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.95      0.85      0.90        66\n",
            "           1       0.91      0.97      0.94       105\n",
            "\n",
            "    accuracy                           0.92       171\n",
            "   macro avg       0.93      0.91      0.92       171\n",
            "weighted avg       0.93      0.92      0.92       171\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Gridsearch"
      ],
      "metadata": {
        "id": "-7J964y95qwK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Finding the right parameters (like what C or gamma values to use) is a tricky task! But luckily, Scikit-learn has the functionality of trying a bunch of combinations and see what works best, built in with GridSearchCV! The CV stands for cross-validation.\n",
        "\n",
        "GridSearchCV takes a dictionary that describes the parameters that should be tried and a model to train. The grid of parameters is defined as a dictionary, where the keys are the parameters and the values are the settings to be tested."
      ],
      "metadata": {
        "id": "P6E_Z0QS5yCl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "param_grid = {'C': [0.1,1, 10, 100, 1000], 'gamma': [1,0.1,0.01,0.001,0.0001], 'kernel': ['rbf']}"
      ],
      "metadata": {
        "id": "QiatzH6c5z6n"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV"
      ],
      "metadata": {
        "id": "CYGODGO557Y7"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "GridSearchCV is a tool for finding the best hyperparameters by trying all combinations in a given grid, using cross-validation to ensure reliable results. It helps improve model performance, prevents overfitting, and automates model tuning, though it can be slow for large parameter spaces."
      ],
      "metadata": {
        "id": "PBxu17AC6Yms"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "grid = GridSearchCV(SVC(),param_grid,refit=True,verbose=1)"
      ],
      "metadata": {
        "id": "AvUHRreN6Zk2"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "grid.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 181
        },
        "id": "CcjZWPqX6Ahp",
        "outputId": "a1dd6ecd-58a3-4dec-9c2b-50084e77c0c5"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 25 candidates, totalling 125 fits\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(estimator=SVC(),\n",
              "             param_grid={'C': [0.1, 1, 10, 100, 1000],\n",
              "                         'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n",
              "                         'kernel': ['rbf']},\n",
              "             verbose=1)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=SVC(),\n",
              "             param_grid={&#x27;C&#x27;: [0.1, 1, 10, 100, 1000],\n",
              "                         &#x27;gamma&#x27;: [1, 0.1, 0.01, 0.001, 0.0001],\n",
              "                         &#x27;kernel&#x27;: [&#x27;rbf&#x27;]},\n",
              "             verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(estimator=SVC(),\n",
              "             param_grid={&#x27;C&#x27;: [0.1, 1, 10, 100, 1000],\n",
              "                         &#x27;gamma&#x27;: [1, 0.1, 0.01, 0.001, 0.0001],\n",
              "                         &#x27;kernel&#x27;: [&#x27;rbf&#x27;]},\n",
              "             verbose=1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: SVC</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(C=1, gamma=0.0001)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>SVC</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(C=1, gamma=0.0001)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid.best_params_\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VTutiqQF63Sx",
        "outputId": "5bc43b03-b8f6-40e4-d853-e7eadcfe5d38"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'C': 10, 'kernel': 'linear'}"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid.best_estimator_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "3sqqegPB7ZH_",
        "outputId": "8da60536-b3c6-44c5-a70c-a9cba95ec8b2"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=10, kernel='linear')"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-4 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-4 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-4 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-4 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-4 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(C=10, kernel=&#x27;linear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>SVC</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(C=10, kernel=&#x27;linear&#x27;)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Then you can re-run predictions on this grid object just like you would with a normal model"
      ],
      "metadata": {
        "id": "ayYwVRNX7now"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "grid_predictions = grid.predict(X_test)"
      ],
      "metadata": {
        "id": "vLR3DJGw7o1j"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(confusion_matrix(y_test,grid_predictions))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kQGSfn6h7eVF",
        "outputId": "7832d3db-d076-4e1d-eb6f-9ca34ff87ae3"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 60   6]\n",
            " [  3 102]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Classification report shows improved F1-score"
      ],
      "metadata": {
        "id": "TTNYg-sz73S2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test,grid_predictions))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DuDcqMbW74at",
        "outputId": "427f44a7-36f4-419d-88c4-dfad6a2d5987"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.95      0.91      0.93        66\n",
            "           1       0.94      0.97      0.96       105\n",
            "\n",
            "    accuracy                           0.95       171\n",
            "   macro avg       0.95      0.94      0.94       171\n",
            "weighted avg       0.95      0.95      0.95       171\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Another set of parameters for GridSearch\n",
        "\n"
      ],
      "metadata": {
        "id": "RrTtfkyq8FCj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "param_grid = {'C': [50,75,100,125,150], 'gamma': [1e-2,1e-3,1e-4,1e-5,1e-6], 'kernel': ['rbf']}\n",
        "grid = GridSearchCV(SVC(tol=1e-5),param_grid,refit=True,verbose=1)\n",
        "grid.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 181
        },
        "id": "puO1KYXu8Lve",
        "outputId": "c90db518-6e50-4cfa-b358-6cb5866e33d8"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 25 candidates, totalling 125 fits\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(estimator=SVC(tol=1e-05),\n",
              "             param_grid={'C': [50, 75, 100, 125, 150],\n",
              "                         'gamma': [0.01, 0.001, 0.0001, 1e-05, 1e-06],\n",
              "                         'kernel': ['rbf']},\n",
              "             verbose=1)"
            ],
            "text/html": [
              "<style>#sk-container-id-5 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-5 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-5 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-5 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-5 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-5 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-5 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-5 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-5 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=SVC(tol=1e-05),\n",
              "             param_grid={&#x27;C&#x27;: [50, 75, 100, 125, 150],\n",
              "                         &#x27;gamma&#x27;: [0.01, 0.001, 0.0001, 1e-05, 1e-06],\n",
              "                         &#x27;kernel&#x27;: [&#x27;rbf&#x27;]},\n",
              "             verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(estimator=SVC(tol=1e-05),\n",
              "             param_grid={&#x27;C&#x27;: [50, 75, 100, 125, 150],\n",
              "                         &#x27;gamma&#x27;: [0.01, 0.001, 0.0001, 1e-05, 1e-06],\n",
              "                         &#x27;kernel&#x27;: [&#x27;rbf&#x27;]},\n",
              "             verbose=1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: SVC</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(C=100, gamma=1e-05, tol=1e-05)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>SVC</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(C=100, gamma=1e-05, tol=1e-05)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid.best_estimator_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "N5A4vV6u8WmT",
        "outputId": "789dc289-9742-4cb0-995d-649e92d78684"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=100, gamma=1e-05, tol=1e-05)"
            ],
            "text/html": [
              "<style>#sk-container-id-6 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-6 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-6 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-6 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-6 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-6 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-6 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-6 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-6 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-6 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(C=100, gamma=1e-05, tol=1e-05)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" checked><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>SVC</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(C=100, gamma=1e-05, tol=1e-05)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid_predictions = grid.predict(X_test)\n",
        "print(confusion_matrix(y_test,grid_predictions))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q6c0KK0B8ato",
        "outputId": "17d92106-4634-41fe-b6d2-c06b20268f7b"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 59   7]\n",
            " [  4 101]]\n"
          ]
        }
      ]
    }
  ]
}